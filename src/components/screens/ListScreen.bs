
function init()
  print "in FocusTestScene init"


  listHolder = m.top.findNode("listHolder")

  'create after we've set up our cell tracker and provider
  ' m.list = listHolder.createChild("RowList")
  '   m.list.rowHeights = [450]
  '   m.list.focusXOffset = [100]
  '   m.list.rowSpacings = []
  '   m.list.rowItemSize = [400,350]
  '   m.list.rowItemSpacing = [0,0]
  '   m.list.showRowLabel = [true]
  '   m.list.itemSize = [1920, 450]
  '   m.list.numRows = 3
  '   m.list.itemComponentName = "ImageCell"

  m.list = listHolder.createChild("ML_List")
  m.list.translation = [0, 0]
  m.cellProvider = m.global.cellProvider
  m.top._cellProvider = m.global.cellProvider
  m.cellTracker = m.global.cellTracker
  m.top._cellTracker = m.global.cellTracker
  m.contentId = 0
  onResetChange()
  m.list.observeField("itemSelected", "itemSelcetedChanged")
  m.list.observeField("itemFocused", "itemFocusedChanged")
  m.list.observeField("itemUnfocused", "itemUnfocusedChanged")
  m.list.observeField("itemSelected", "itemSelectedChanged")
  m.list.observeField("currFocusItemIndex", "currFocusItemIndexChanged")
  ' m.list.observeField("rowFocused", "onInfoChange")

end function

function onResetChange()
  ? "resetting"
  m.list.content = invalid
  m.list.content = createData()
end function

function createData()

  content = createObject("roSGNode", "ContentNode")

  for i = 0 to m.top._numberOfRows
    row = content.createChild("ContentNode")
    row.title = "ROW " + str(i)
    row.addField("isHidden", "boolean", true)
    row.addField("isFocusable", "boolean", true)
    if i <> 0
      if i mod 9 = 0
        row.addFields({ "focusType": "floatingWrap" })
        row.title += " floating"
      else
        row.addFields({ "focusType": "fixed" })
        row.title += " fixed"
      end if
      if i = 1
        row.addFields({ "yOffset": 650 })
        row.title += " post hero"
      else if i mod 5 = 0
        row.addFields({ "yOffset": 400 })
        row.title += " 400"
      else if i mod 5 = 3
        row.addFields({ "yOffset": 400 })
        row.title += " 700"
      else
        row.addFields({ "yOffset": 0 })
        row.title += " 0"
      end if
    end if

    if i = 10 or i = 14 or i = 19 or i = 22 or i = 23 or i = 28
      cellType = "RectComp"
      row.addFields({
        "cellType": cellType
      })      
    end if



    row.appendChildren(makeItems(m.top._defaultCellType, 60))
  end for
  return content
end function

function itemFocusedChanged()
  print "itemFocused changed to: "; m.list.itemFocused
end function

function itemSelcetedChanged()
  print "itemFocused changed to: "; m.list.itemFocused
  newScreen = createObject("roSGNode", "ListScreen")
  push(newScreen)
  mv.setFocus(newScreen)
end function

function itemUnfocusedChanged()
  print "itemUnfocused changed to: "; m.list.itemUnfocused
end function

function itemSelectedChanged()
  print "itemSelected changed to: "; m.list.itemSelected
end function


function currFocusItemIndexChanged()
end function

function onAddTypeOnes()
  addItems("SimpleCell", m.top._addTypeOnes)
end function

function onAddComplex()
  addItems("ComplexCell", m.top._addTypeComplex)
end function

function onAddTypeTwos()
  addItems("SimpleCell2", m.top._addTypeTwos)
end function

function onAddTypeOnePrebakes()
  m.cellProvider.callfunc("addPreBakedCells", m.top._addTypeOnePrebakes, "SimpleCell")
end function

function onAddTypeTwoPrebakes()
  m.cellProvider.callfunc("addPreBakedCells", m.top._addTypeTwoPrebakes, "SimpleCell2")
end function

function addItems(cellType, number)
  row = m.list.content.getChild(focusedRow)
  row.appendChildren(makeItems(cellType, number))
end function

function makeItems(cellType, number)
  d = createObject("roDateTime")
  nonce = str(d.asSeconds()).trim()
  items = []
  for i = 0 to number
    child = createObject("roSGNode", "ContentNode")
    child.id = str(m.contentId).trim()
    child.description = "some really long " + child.id + "text in here " + child.id
    child.HDGRIDPOSTERURL = "https://picsum.photos/id/" + str(m.contentId mod 1000).trim() + "/360/300?n=" + nonce
    ' child.HDGRIDPOSTERURL = "https://p1.hiclipart.com/preview/484/533/90/random-movie-collection-folder-icon-part-3-2-guns-256x256-2-guns-movie-poster-art-png-clipart.jpg"
    child.title = "Item " + child.id.tostr()

    if m.contentId mod 5 = 0
      cellType = "SimpleCell"
    else if m.contentId mod 7 = 0
      cellType = "ComplexCell"
    end if

    child.addFields({
      "cellType": cellType
    })
    items.push(child)
    m.contentId++
  end for
  return items
end function

function onRemove()
  row = m.list.content.getChild(focusedRow)

  startIndex = row.getChildCount() - m.top._removeItems
  children = row.getChildren(m.top._removeItems, startIndex)
  row.removeChildren(children)

end function

function toggleCellState(items, state)

  for each item in items
    if item <> invalid
      dynamicCell = m.cellTracker.callFunc("getCellForContentId", item.id)
      if dynamicCell <> invalid
        ' ? "setting viewstate on dynamic cell " ; dynamicCell.trackingId ; " content Id " ; item.id
        dynamicCell.viewState = state
      end if
    end if
  end for

end function

function onHideRow()
  ? "onHide" 

  row = m.list.content.getChild(focusedRow)
  toggleCellState(getRowItems(row, m.top._hideRowItems), "hidden")
end function


function onShowRow()
  ? "onShow"

  row = m.list.content.getChild(focusedRow)
  toggleCellState(getRowItems(row, m.top._showRowItems), "show")
end function

function getRowItems(row, number)
  items = []
  for i = 0 to number
    items.push(row.getChild(i))
  end for

  return items
end function

function onHideItems()
  for i = 0 to m.top._hideItems
    dynamicCell = m.cellTracker.callFunc("getCellForContentId", str(i).trim())
    if dynamicCell <> invalid
      dynamicCell.viewState = "hidden"
    end if
  end for
end function

function onShowItems()
  for i = 0 to m.top._showItems
    dynamicCell = m.cellTracker.callFunc("getCellForContentId", str(i).trim())
    if dynamicCell <> invalid
      dynamicCell.viewState = "show"
    end if
  end for
end function


'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ keypresses
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function onKeyPressOption() as boolean
  ? "pressed option"
  return true
end function

function onKeyPressFastForward() as boolean
  return true
end function

function onKeyPressBack() as boolean
  ? "going back!"

  if not m.top.isRoot
    m.list.isHidden = true
    pop()
  end if
  return true
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ lifecycle
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function onShow()
  m.list.isHidden = false
  mv.setFocus(m.list)
end function

function onHide()
  m.list.isHidden = true
end function

function onGainedFocus(isSelfFocused)
  m.logInfo("onGainedFocus", isSelfFocused)
  if isSelfFocused
    mv.setFocus(m.list)
  end if
end function