import "pkg:/source/roku_modules/mc/Tasks.brs"
import "pkg:/source/roku_modules/mx/BaseObservable.brs"

function init()
  m.video = m.top.findNode("video")
  m.content = createObject("roSGNode", "ContentNode")
  m.video.content = m.content
  m.isFirstLoadComplete = false
  m.numberOfImages = 100
  m.numberToLoad = 5
  m.numberOfPosters = 2
  m.posters = []
  m.lastTask = invalid
  m.currentIndex = 0
  m.lastLoadedIndex = 0
  m.cacheMap = {}
  mc.tasks.observeNodeField(m.video, "errorMsg", onVideoErrorChange)
  mc.tasks.observeNodeField(m.video, "state", onVideoStateChange)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ video
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


function onVideoErrorChange(error)
  m.log.error("error playing video: ", error)
end function

function onVideoStateChange(state)
  m.log.info("new video state: ", state)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ images
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function moveIndex(direction)
  m.log.info("move", direction)
  m.currentIndex += direction
  if m.currentIndex < 0
    m.currentIndex = m.numberOfImages - 1
  else if m.currentIndex > m.numberOfImages - 1
    m.currentIndex = 0
  end if

  m.log.info("ci", m.currentIndex)
  if m.currentIndex mod 3 = 0 and m.currentIndex + 5 > m.lastLoadedIndex
    cacheImages()
  end if

  for i = 0 to m.numberOfPosters -1

    key = (m.currentIndex + i).toStr().trim()
    poster = m.posters[i]
    poster.uri = m.cacheMap[key]
  end for
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ keypresses
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function onKeyPressUp() as boolean
  ? "pressed up"
  m.lastTask = mc.tasks.createTask("ImageRequestTask", { args: { reset: true } })

  currentIndex = 0
  cacheImages()
  m.cacheMap = {}
  return true
end function

function onKeyPressRight() as boolean
  ? "pressed right"
  moveIndex(1)
  return true
end function

function onKeyPressLeft() as boolean
  ? "pressed left"
  moveIndex(-1)
  return true
end function

function onKeyPressDown() as boolean
  ? "pressed up"
  currentIndex = 0
  cacheImages()
  return true
end function

function onKeyPressOption() as boolean
  ? "pressed option"
  return true
end function

function onKeyPressBack() as boolean
  return true
end function

function makePosters()
  d = createObject("roDateTime")
  nonce = str(d.asSeconds()).trim()
  m.log.info("creating", m.numberOfPosters, "posters")
  row = 0
  col = 0
  id = 0
  for i = 0 to m.numberOfPosters - 1
    col++
    id++
    if col = 5
      col = 0
      row++
    end if
    poster = m.top.createChild("Poster")
    poster.width = 1920
    poster.height = 1080
    ' poster.loadSync = true
    poster.translation = [col * 800, row * 20]
    poster.loadWidth = 1920
    poster.loadHeight = 1080
    poster.id = str(id).trim()
    m.posters.push(poster)
  end for
end function

function cacheImages()
  ' mc.tasks.cancelTask(m.lastTask)
  ids = []
  for i = m.lastLoadedIndex to m.lastLoadedIndex + m.numberToLoad
    ids.push(i)
  end for
  m.lastLoadedIndex += m.numberToLoad
  m.lastTask = mc.tasks.createTask("ImageRequestTask", { args: { ids: ids } }, onCacheImages)
end function

function onCacheImages(result)
  if result.isOK
    m.cacheMap.append(result.data)
    m.lastTask = invalid
  end if

  if not m.isFirstLoadComplete
    m.isFirstLoadComplete = true
    moveIndex(0)
  end if
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ lifecycle
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function onShow()
  m.log.info("onShow")
end function

function onFirstShow()
  m.log.info("created", number, "posters")
  makePosters()
  cacheImages()
end function

function onHide()
end function

function onGainedFocus(isSelfFocused)
  m.log.info("onGainedFocus", isSelfFocused)
  if isSelfFocused
    ' mv.setFocus(m.list)
  end if
end function
