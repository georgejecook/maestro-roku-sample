import "pkg:/source/roku_modules/log/LogMixin.brs"
import "pkg:/source/roku_modules/mioc/MIOC.brs"
import "pkg:/source/roku_modules/mc/Tasks.brs"
import "pkg:/source/roku_modules/mc/Utils.brs"

function Init() as void
  createObject("roSGNode", "TrackerTask")

  m.global.addFields({ "isFocusLocked": false })
  m.top._rLog = log.initializeLogManager(["log_PrintTransport", "log_ScreenTransport"], 5)
  log.registerLogger("MainScene")
  m.logInfo("Maestro 1.0 sample application. Featuring rLog")
end function

' /**
'  * @member begin
'  * @memberof module:MainScene
'  * @instance
'  * @description This would be called when all initial data is loaded. The app would show a loading spinner and loading background until this point
'  * @param {paramType} paramDescription
'  * @returns {returnType} returnDescription
'  */
function begin(args = invalid)
  m.logInfo("begin")
  m.top._global = m.global
  initializeIOC()
  mioc.initialize()
  m.logInfo("starting the bootstrap task to orchestrate our app init/loading tasks")
  boostrapTask = mc.tasks.createTask("BootStrapSequence", invalid, onBootStrapSequenceComplete)
  m.top.appendChild(boostrapTask)
  ' onBootStrapSequenceComplete()
end function

function onBootStrapSequenceComplete(result)
  m.logInfo("boot strap is complete, with result", result, " - showing main screen")

  appController = m.top.findNode("mainGroup").createChild("AppController")
  mioc.setInstance("appController", appController)
  m.top._appController = appController
  appController@._initialize()
  appController.setFocus(true)
end function

function initializeIOC()
  m.logInfo("initializing the IOC container")
  'TODO -set any important things here in the ioc
  mioc.createContainer()
end function