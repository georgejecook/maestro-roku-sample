import "pkg:/source/roku_modules/maestro/core/Utils.brs"
import "pkg:/source/roku_modules/maestro/ml/ListMixin.brs"
import "pkg:/source/roku_modules/maestro/ml/BaseRow.brs"
import "pkg:/source/roku_modules/maestro/ml/RowItemScroller.brs"
import "pkg:/source/roku_modules/maestro/ml/RowItemViewManager.brs"
import "pkg:/source/roku_modules/maestro/ml/ItemFocusManager.brs"


@node("ComplexRowEfficient", "ml_BaseRow")
class ComplextRowEfficient extends ml.BaseRow


  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ state
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private isButton1Focused = true

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ views
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private bgRect
  private contentGroup
  private videoPlayer
  private button1
  private button2
  private poster
  private label as mc.types.node

  function new()
    super()
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ overridden
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function createViews()
    m.bgRect = m.createSGNode("mv_Rectangle", m.top, "bgRect", {
      size: [1920, 1080]
      color: "#000000"
      opacity: 1
    })
    m.poster = m.createSGNode("mv_Poster", m.top, "poster", {
      translation: [0, 0]
      size: [1920, 700]
    })
    m.button1 = m.createSGNode("mv_Button", m.top, "button1", {
      text: "WHAT IS YOUR STYLE?"
      translation: [1000, 300]
      size: [800, 80]
    })
    m.button2 = m.createSGNode("mv_Button", m.top, "button2", {
      text: "THE ART OF FIGHTING WITHOUT FIGHTING"
      translation: [1000, 400]
      size: [800, 80]
    })
    m.label = m.createSGNode("mv_Label", m.top, "label", {
      translation: [1000, 500]
      size: [800, 80]
      text: "Default"
      fontKey: "small,30"
    })
    m.observe(m.button1.selected, function(): ? " ADD" : m.sendRowData({ action: "add" }): end function, "none")
    m.observe(m.button2.selected, function(): ? " REMOVE " : m.sendRowData({ action: "remove" }): end function, "none")
  end function

  protected override function onContentUpdate(content as mc.types.node)
    m.log.info("ROW CHANGE")
    super.onContentUpdate(content)
    m.label.text = asString(content.rowText)
  end function

  public override function getFocusIndicatorConfig(cellInfo as ml.CellInfo, direction as integer, isFloatingFocus as boolean, isFromListScroll = false as boolean) as ml.FocusIndicatorConfig
    return ml.createFocusIndicatorConfig(m.top, invalid, direction, -1, true)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ KeyPress
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onKeyPressUp() as boolean
    m.log.info("onKeyPressUp")
    if m.isButton1Focused
      return false
    else
      m.setFocus(m.button1)
      m.isButton1Focused = true
      return true
    end if
  end function

  private function onKeyPressDown() as boolean
    m.log.info("onKeyPressDown")
    if m.isButton1Focused
      m.setFocus(m.button2)
      m.isButton1Focused = false
      return true
    else
      return false
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ delegate
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onDidEnter(event as ml.ListEvent)
    ? "CR DID ENTER"
    m.poster.uri = "https://www.usadojo.com/wp-content/uploads/2013/12/art-of-fighting-quote-700.jpg"
  end function

  private function onDidGainFocus(event as ml.ListEvent)
    ? "CR: onDidGainFocus " ; " " ; event.direction
    if m.owner.isFocused or m.owner.isChildFocused
      if event.direction = 1
        m.setFocus(m.button1)
        m.isButton1Focused = true
      else
        m.setFocus(m.button2)
        m.isButton1Focused = false
      end if
    end if
  end function

  private function onWillGainFocus(event as ml.ListEvent)
    ? " CR: onWillGainFocus"
    if event.direction = 1
      m.top.opacity = 1
    end if
  end function

  private function onGainingFocus(event as ml.ListEvent)
    ? "CR: onGainingFocus " ; " " ; event.direction ; " " ; event.fraction
    if event.direction = -1
      m.top.opacity = event.fraction
    end if
  end function

  private function onLosingFocus(event as ml.ListEvent)
    ? "CR: onLosingFocus " ; " " ; event.direction ; " " ; event.fraction
    if event.direction = 1
      m.top.opacity = 1 - event.fraction
    end if
  end function

  private function onDidLoseFocus(event as ml.ListEvent)
    ? "CR: onDidLoseFocus " ; " " ; event.direction
    if event.direction = 1
      m.top.opacity = 0
    end if
  end function

end class
