import "pkg:/source/roku_modules/rokurequests/Requests.brs"
import "pkg:/source/roku_modules/log/LogMixin.brs"

@MTask("ImageRequestTask", "Task")
class ImageRequestTask

  public function nodeRun(args)
    instance = new ImageRequestTask(args.imageKeys, args.reset)
    return instance.run()
  end function

  public url = ""


  function new(imageKeys, reset = false)
    m.log = new log.Logger("ImageRequestTask")
    m.ids = ids
    m.reset = reset

  end function

  function run()
    fs = CreateObject("roFileSystem")

    if m.reset = true
      for i= 0 to 100
        key = str(i).trim()
        filename = m.getFileLocation(key)
        fs.delete(filename)
      end for
      return {isOK:true}
    end if

    m.log.info("fetching", m.ids.count(), "ids")
    cacheMap = {}
    for each i in m.ids
      key = str(i).trim()
      url = m.getUrl(key)
      m.log.info("fetching", key, "filename", filename)
      filename = m.getFileLocation(key)

      if fs.exists(filename)
        m.log.info("file is cached")
        cacheMap[key] = filename
      else
        m.log.info("downloading", url)
        http = createObject("roUrlTransfer")
        http.setUrl(url)
        http.setCertificatesFile("common:/certs/ca-bundle.crt")
        http.initClientCertificates()
        res = http.getToFile(filename)
        cacheMap[key] = filename
        m.log.info("file is in cachefs? ", fs.exists(filename))

      end if
      ' cacheMap[key] = url
    end for
    m.log.info("finshed")

    return { isOK: true, data: cacheMap }
  end function

  function getUrl(key)
    return `https://picsum.photos/id/${key}/1280/720`
    ' return `https://picsum.photos/id/${key}/1920/1080`
  end function

  function getFileLocation(key)
    ' return "tmp:/" + key + ".jpg"
    return "cachefs:/" + key + ".jpg"
  end function
end class