import "pkg:/source/roku_modules/maestro/view/BaseScreen.brs"
import "pkg:/source/roku_modules/maestro/core/Utils.brs"

@node("DynamicContainerTestScreen", "mv_BaseScreen")
class DynamicContainerTestScreen extends mv.BaseScreen

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Fields
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  private bgRect as mc.types.node
  private label as mc.types.node
  private previousView as mc.types.node
  private transition as mc.types.node
  private childId = 0

  private dynamicContainer as mc.types.node

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Initialization
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function new()
    super("DynamicContainerTestScreen")
  end function

  protected override function initialize()
    m.log.info("Initialized DynamicContainerTestScreen")
    super.initialize()

    m.bgRect = m.createSGNode("mv_Rectangle", m.top, "bgRect", {
      size: [1920, 1080]
      color: "#ff0000"
    })

    m.label = m.createSGNode("mv_Label", m.bgRect, "label", {
      text: "Dynamic container test screen"
      font: "font:MediumSystemFont"
      color: "#000000"
      translation: [500, 500]
    })
    m.transition = m.createSGNode("mv_FadeTransition", m.top, "fadeTransition", {
      color: "#ffff00"
    })

    m.createSGNode("mv_Label", m.bgRect, "label", {
      font: "font:mediumBoldSystemFont"
      color: "#000000"
      wrap: true
      translation: [100, 700]
      size: [1300, 0]
      text: `Left: set new, Right: set invalid, Up: set to previous view
      Play: toggle transition, Down: toggle visibility`
    })
    m.dynamicContainer = m.createSGNode("mv_DynamicContainer", m.top, "dynamicContainer")
    m.dynamicContainer.transition = m.transition
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Presses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onKeyPressLeft() as boolean
    m.log.info("Adding a screen")

    view = m.createSgNode("NavControllerTestChildScreen", invalid, `child_${m.childId}`)
    m.childId++
    m.previousView = m.dynamicContainer.currentView
    m.dynamicContainer@.setNextView(view)
    return true
  end function

  private function onKeyPressUp() as boolean
    m.log.info("reusing previous screen: ", mc.dv(m.previousView))
    m.dynamicContainer@.setNextView(m.previousView)
    return true
  end function

  private function onKeyPressRight() as boolean
    m.log.info("setting screen to invalid")
    m.dynamicContainer@.setNextView(invalid)
    return true
  end function

  private function onKeyPressPlay() as boolean
    transition = m.dynamicContainer.transition = invalid ? m.transition: invalid
    m.log.info("setting transition to ", mc.dv(transition))
    m.dynamicContainer.transition = transition
    return true
  end function

  private function onKeyPressDown() as boolean
    m.dynamicContainer.visible = not m.dynamicContainer.visible
    return true
  end function

end class
