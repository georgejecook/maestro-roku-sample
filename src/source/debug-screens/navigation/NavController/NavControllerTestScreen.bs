import "pkg:/source/roku_modules/maestro/view/BaseScreen.brs"
import "pkg:/source/roku_modules/maestro/core/Utils.brs"
import "pkg:/source/roku_modules/maestro/core/Notification.brs"

@node("NavControllerTestScreen", "mv_BaseScreen")
class NavControllerTestScreen extends mv.BaseScreen

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Fields
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  private bgRect as mc.types.node
  private navController as mc.types.node
  private lastPoppedView as mc.types.node
  private transition as mc.types.node
  private childId = 0

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Initialization
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function new()
    super("NavControllerTestScreen")
  end function

  protected override function initialize()
    m.log.info("Initialized NavControllerTestScreen")
    super.initialize()

    m.bgRect = m.createSGNode("mv_Rectangle", m.top, "bgRect", {
      size: [1920, 1080]
      color: "#b2f3b2"
    })

    m.navController = m.createSGNode("mv_navController", m.top, "navController")
    m.transition = m.createSGNode("mv_FadeTransition", m.top, "fadeTransition", {
      color: "#ff0000"
    })

    m.createSGNode("mv_Label", m.bgRect, "label", {
      font: "font:mediumBoldSystemFont"
      color: "#000000"
      wrap: true
      translation: [100, 500]
      size: [1300, 0]
      text: `Left: push new, Right: pop, Down: toggle nav visibility
      Up: Push previously popped, Play: toggle transition`
    })
    m.navController.transition = m.transition
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Presses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onKeyPressLeft() as boolean
    m.log.info("Pushing a screen")
    childScreen = m.createSGNode("NavControllerTestChildScreen", invalid, m.childId)
    m.navController@.push(childScreen)
    m.childId++
    return true
  end function

  protected override function onKeyPressRight() as boolean
    m.log.info("Popping a screen")
    m.lastPoppedView = m.navController@.pop(true)
    return true
  end function

  private function onKeyPressDown() as boolean
    shown = not m.navController.visible
    m.log.info("toggling navcontroller visibility", shown)
    m.navController@._setShown(shown)
    return true
  end function

  private function onKeyPressUp() as boolean
    m.log.info("pushing last popped view")
    m.navController@.push(m.lastPoppedView)
    return true
  end function

  private function onKeyPressPlay() as boolean
    transition = m.navController.transition = invalid ? m.transition: invalid
    m.log.info("setting transition to ", mc.dv(transition))
    m.navController.transition = transition
    return true
  end function
end class
