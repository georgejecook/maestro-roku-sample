import "pkg:/source/roku_modules/maestro/view/BaseScreen.brs"
import "pkg:/source/roku_modules/maestro/core/Utils.brs"

@node("NotificationChildScreen", "mv_BaseScreen")
class NotificationChildScreen extends mv.BaseScreen

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Fields
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private label as mc.types.node

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Initialization
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function new()
    super("NotificationChildScreen")
  end function

  protected override function initialize()
    super.initialize()
    m.createViews()
    m.observeNotification("Success", m.onSuccess)
    m.observeNotification("Error", m.onError)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function createViews()
    bgRect = m.createSGNode("mv_Rectangle", m.top, "bgRect", {
      size: [600, 400]
      color: "#fff000"
    })
    m.label = m.createSGNode("mv_Label", bgRect, "label", {
      font: "font:mediumBoldSystemFont"
      color: "#ff0000"
      wrap: true
      size: [400, 0]
      text: `Waiting notification for screen ${m.top.id}`
    })
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Notifications callbacks
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onSuccess(notification as mc.Notification)
    m.log.info("Received notification", notification)
    m.label.text = `Received ${notification.name} notification`
  end function

  private function onError(notification as mc.Notification)
    m.log.info("Received notification", notification)
    m.label.text = `Received ${notification.name} notification`
  end function
end class

