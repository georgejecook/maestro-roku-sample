import "pkg:/source/roku_modules/maestro/view/BaseScreen.brs"
import "pkg:/source/roku_modules/maestro/core/Utils.brs"
import "pkg:/source/roku_modules/maestro/core/DebugTimer.brs"
import "pkg:/source/roku_modules/maestro/ml/ListMixin.brs"

@node("ModuleScreen", "mv_BaseScreen")
class ModuleScreen extends mv.BaseScreen

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Public Debug Fields
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  @observer("onRemoveItems")
  @alwaysnotify
  public removeItems = 0

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Views
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private list
  private listHolder
  private bgRect
  private button

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Fields
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private numberOfRows = 20
  private defaultCellType = "ml_SimpleCell"
  public componentPool as mc.types.node
  private contentId = 0
  private rowSettings
  private focusSettings
  private cellSettings
  private loadingIndicator
  private scrollSpeed = 2
  private firstItem = invalid
  private dataIndex = 0
  private downInterval as mc.types.node
  private nextMoveIsUp = false

  function new()
    super("ModuleScreen")
  end function

  protected override function initialize()
    super.initialize()
    translation = [0, 0]
    size = [1920, 1080]

    m.bgRect = m.createSGNode("mv_Rectangle", m.top, "bgRect", {
      translation: translation
      size: size
      color: "#6a307d"
    })
    m.button = m.createSGNode("Button", m.top, "button", {
      text: "focus me"
    })

    m.listHolder = m.createSGNode("Group", m.top, "listHolder")
    m.listHolder.translation = [0, 200]
    m.componentPool = m.global.componentPool

    m.list = m.createSGNode("ml_List", m.listHolder, "list", {
      translation: translation
      width: size[0]
      height: size[1]
    })
    m.loadingIndicator = m.createSGNode("LoadingIndicator", m.top, "loadingIndicator", {
      isActive: true
      width: 1920
      height: 1080
      backgroundVisible: false
    })
    m.onResetChange()

    ' m.downInterval = m.setInterval(m.moveAnItem, 5)

  end function

  private function onResetChange()
    m.list@.setContent(invalid)
    m.cellSettings = ml.listMixin.createCellSettings("ml_SimpleCell", [307, 100], 30)

    timer = new mc.utils.DebugTimer("list")
    m.rowSettings = ml.listMixin.createRowSettings(m.cellSettings, invalid, 30)

    m.focusSettings = ml.listMixin.createFocusSettings("fixed", [-5, -5, 5, 5])
    listSettings = ml.listMixin.createListSettings()
    listSettings.rowCreationStrategy = "async"
    listSettings.rowCreationBatchSize = 5
    listSettings.rowCreationBatchDelay = 0.3
    listSettings.numberItemsToRenderAfter = 5
    listSettings.renderStrategy = "dynamic"
    listSettings.numberItemsToRenderBefore = 5

    content = ml.listMixin.createListContent(m.focusSettings, m.rowSettings, listSettings)

    items = m.createHeaderOnlyData()
    timer.log("makeData")
    m.setFocus(m.loadingIndicator)

    content@.appendChildren(items)
    content@.setNotificationsEnabled(false)

    m.list.visible = false
    m.list@.setContent(content)

    m.content = content
    timer.log("set content")
    if m.list.state = "rendered"
      m.onListRenderState("rendered")
      m.loadingIndicator.isActive = false
    else
      m.observeNodeField(m.list, "state", m.onListRenderState, "value", true)
    end if


    m.mergeLoadedData()
  end function

  private function onListRenderState(state as string)
    m.log.info("onListRenderState", state)
    if state = "rendered"
      m.setFocus(m.list)
      m.list@.moveToRowItemIndex(0, 0)
      m.list.visible = true
      m.loadingIndicator.isActive = false
    end if
  end function

  private function createHeaderOnlyData()
    content = []
    i = 0
    row = createObject("roSGNode", "ml_RowContent")
    row.id = rnd(2147483647).toStr()
    numItems = 5
    row0FocusSettings = ml.listMixin.createFocusSettings("fixed", [0, 0, 0, 0])
    row0FocusSettings.feedbackStyle = "none"
    cellSettings = ml.listMixin.createCellSettings("HeroCellEfficient", [1100, 700], 30)
    row.settings = ml.listMixin.createRowSettings(cellSettings, row0FocusSettings)
    row.settings.headerSettings.position = "none"
    row.settings.contentOffset = [400, -30]
    prefix = "HERO"
    row.settings.screenPos = -1

    row.title = "ROW " + str(i)
    ' row.settings.screenPos = 400
    content.push(row)
    row@.appendChildren(m.makeItems(m.defaultCellType, numItems, prefix))

    return content
  end function

  private function createModule(title as string, numItems as integer)
    gridFocusSettings = ml.listMixin.createFocusSettings("floating", [0, 0, 0, 0])
    row = createObject("roSGNode", "ml_RowContent")
    row.id = rnd(2147483647).toStr()
    row.settings = ml.listMixin.createGridRowSettings(m.cellSettings, gridFocusSettings, 30, invalid, 150, 3, 150, 3)
    row.screenPos = 0
    row.firstRowScreenPos = 400
    row.otherRowScreenPos = 70

    row.settings.contentOffset = [100, 30]
    numItems = 7
    row.title = title
    row@.appendChildren(m.makeItems(m.defaultCellType, numItems))
    return row
  end function

  private function addItems(cellType as string, number as integer)
    row = m.list.content@.getChild(m.list.focusedRowIndex)
    row@.appendChildren(m.makeItems(cellType, number))
  end function

  private function makeItems(cellType as string, number as integer, prefix = "Item" as string)
    items = []
    for i = 0 to number - 1
      items.push(m.makeItem(cellType, `${prefix} ${m.contentId} [${i}]`))
    end for
    return items
  end function

  private function makeItem(cellType as string, title as string) as mc.types.node
    id = rnd(2147483647).toStr()
    child = m.createSGNode("Item", invalid, id, {
      json: {
        title: title
        description: "some really long " + id + "text in here " + id
        posterUrl: "https://picsum.photos/id/" + str(m.contentId mod 1000).trim() + "/340/340"
      }
    })

    child.description = "some really long " + id + "text in here " + id
    child.HDGRIDPOSTERURL = "https://picsum.photos/id/" + str(m.contentId mod 1000).trim() + "/340/340"
    child.title = title
    m.contentId++
    return child
  end function

  private function onRemoveItems(numItems as integer)
    row = m.list.content@.getChild(m.list.focusedRowIndex)
    startIndex = row.length - numItems
    row@.removeChildrenIndex(startIndex, numItems)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ List Delegate Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  ' private function onCellWillGainFocus(event as ml.ListEvent)
  '   ? "+SCREEN onCellWillGainFocus : R: "; event.rowIndex ; " I: " ; event.cellIndex; " D:" ; direction
  ' end function

  ' private function onCellDidGainFocus(event as ml.ListEvent)
  '   ? "+SCREEN onCellDidGainFocus  : R: "; event.rowIndex ; " I: " ; event.cellIndex; " D:" ; direction
  ' end function


  ' private function onCellDidLoseFocus(event as ml.ListEvent)
  '   ? "+SCREEN onCellDidLoseFocus : R: "; event.rowIndex ; " I: " ; event.cellIndex; " D:" ; direction
  ' end function

  ' private function onRowDidGainFocus(event as ml.ListEvent)
  '   ? "+SCREEN onRowDidGainFocus : R: "; event.rowIndex ; " D:" ; direction
  ' end function

  ' private function onRowDidLoseFocus(event as ml.ListEvent)
  '   ? "+SCREEN onRowDidLoseFocus : R: "; event.rowIndex ; " D:" ; direction
  ' end function

  ' private function onRowGainingFocus(event as ml.ListEvent)
  '   ? "+SCREEN onRowGainingFocus : R: "; event.rowIndex ; " D:" ; direction ; " F: " ; fraction
  ' end function

  ' private function onRowLosingFocus(event as ml.ListEvent)
  '   ? "+ onRowLosingFocus : R: "; event.rowIndex ; " D:" ; direction ; " F: " ; fraction
  ' end function

  ' private function onCellGainingFocus(event as ml.ListEvent)
  '   ? "+SCREEN onCellGainingFocus : R: "; event.rowIndex ; " C " ; cellIndex; " D:" ; direction ; " F: " ; fraction
  ' end function

  ' private function onCellLosingFocus(event as ml.ListEvent)
  '   ? "+ onRowLosingFocus : R: "; event.rowIndex ; " D:" ; " C " ; cellIndex; direction ; " F: " ; fraction
  ' end function

  private function onItemSelected(event as ml.ListEvent)
    ? ">>>onItemSelected changed to:" ; event.rowIndex ; "," ; event.cellIndex
    rowContent = m.list.content@.getChild(event.rowIndex)
    title = `NEW Item ${m.contentId}`
    child = m.makeItem("SimpleCell", title)
    rowContent@.insertChild(child, event.cellIndex)
    ' rowContent.removeChild(child)
    row = m.list@.getRowRenderer(event.rowIndex)
    row@.forceUpdate()
  end function


  private function moveAnItem()
    m.nextMoveIsUp = not m.nextMoveIsUp

    if m.nextMoveIsUp
      m.moveUp()
    else
      m.moveDown()
    end if
    m.changeFocus(m.nextMoveIsUp)
  end function

  private function changeFocus(isButton as boolean)
    ? "CHANGE FOCUS button? "; isButton
    m.setFocus(m.button)
    m.setTimeout(m.focusBackOnList, 0.5)
  end function

  private function focusBackOnList()
    m.setFocus(m.list)
  end function

  private function moveDown()
    row = m.list.content@.getChild(1)
    item = row.getChild(0)

    row = m.list.content@.getChild(3)
    if row <> invalid
      row@.appendChild(item)
    end if
  end function

  private function moveUp()
    row = m.list.content@.getChild(3)
    item = row.getChild(0)

    row = m.list.content@.getChild(1)
    if row <> invalid
      row@.appendChild(item)
    end if
  end function

  private function mergeLoadedData()
    m.removeNonHeaderRows(false)
    newModules = []
    modules = []
    numModules = 0
    modules.push(m.createModule("LIVE", 4))
    ' if m.dataIndex <= 2 or m.dataIndex = 3 or m.dataIndex = 5 or m.dataIndex = 6
    '   ? "ADDING LIVE"
    '   modules.push(m.createModule("LIVE", 4))
    ' end if
    ' if m.dataIndex <= 2 or m.dataIndex = 4 or m.dataIndex = 6
    '   ? "ADDING UPCOMING"
    '   modules.push(m.createModule("UPCOMING", 5))
    ' end if
    ' if m.dataIndex <= 2 or m.dataIndex = 4 or m.dataIndex = 5 or m.dataIndex = 6
    '   ? "ADDING FINAL"
    '   modules.push(m.createModule("FINAL", 3))
    ' end if
    'ensure that row offsets are applied correctly
    for each module in modules
      if module.length > 0
        if numModules > 0 and module.settings.subType() = "ml_GridRowSettings"
          settings = module.settings.clone(true)
          settings.firstRowScreenPos = settings.otherRowScreenPos
          module.settings = settings
        end if
        newModules.push(module)
        numModules++
      end if
    end for

    m.list.content@.setNotificationsEnabled(false)

    m.list.content@.insertChildren(newModules, 1)
    m.list.content@.setNotificationsEnabled(true)
    m.list@.synchronizeContent()
  end function

  private function removeNonHeaderRows(update = true as boolean)
    rows = m.list.content@.getChildren(-1, 0)
    m.list.content@.setNotificationsEnabled(false)
    for i = rows.count() - 1 to 0 step -1
      rowContent = rows[i]
      if rowContent.title = "LIVE" or rowContent.title = "UPCOMING" or rowContent.title = "FINAL"
        m.list.content@.removeChildIndex(i)
      end if
    end for

    if update
      m.list.content@.notifyUpdate()
      m.list@.synchronizeContent()
    end if
  end function

  private function removeList()
    ? "REMOVING LIST"
    m.list.getParent().removeChild(m.list)
    m.list = invalid
  end function

  private function recreateList()
    ? "RECREATING LIST"

    m.list = m.createSGNode("ml_List", m.listHolder, "list", {
      width: 1920
      height: 1080
    })
    m.list.id = "I AM NEW LIST"
    m.top.appendChild(m.list)
    m.onResetChange()
    m.setFocus(m.list)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Presses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private content as mc.types.node
  private function onKeyPressOptions() as boolean

    ? "RESETTING LIST"
    m.list.content = ml.listMixin.createListContent()

    m.setTimeout(m.removeList(), 1)
    m.setTimeout(m.recreateList(), 2)
    ' if m.downInterval = invalid
    '   ? "DISABLING INTERVALS"
    '   m.downInterval = m.setInterval(m.moveAnItem, 7)
    ' else
    '   ? "ENABLING INTERVALS"
    '   m.cancelInterval(m.downInterval)

    '   m.downInterval = invalid
    ' end if


    ' m.dataIndex = mc.clamp(m.dataIndex + 1, 0, 6, true)
    ' ? "UPDATING DATA " ; m.dataIndex
    ' m.mergeLoadedData()
    ' if m.firstItem = invalid
    '   m.firstItem = m.list.content@.getChild(0)
    '   m.list.content.removeChild(m.firstItem)
    ' else
    '   m.list.content.insertChild(m.firstItem, 0)
    '   m.firstItem = invalid
    ' end if

    ' m.firstItem = m.list.content@.getChild(0)
    ' m.firstItem.isHidden = not m.firstItem.isHidden
    ' row.isHidden = not row.isHidden
    ' m.list.content = invalid
    ' m.onResetChange()
    return true
  end function

  private function isCapturingAnyKeyPress(key as string, press as boolean) as boolean
    return true
  end function

  private function onKeyPressRewind() as boolean
    ? " MOVE A CELL TO PREVIOUS"

    ? "FOCUSED ROW INDEX ="; m.list.focusedRowIndex
    ? "FOCUSED LIST CELL INDEX ="; m.list.focusedCellIndex
    row = m.list.content@.getChild(m.list.focusedRowIndex)

    ? "FOCUSED row CELL INDEX ="; row.focusedCellIndex
    item = row@.getChild(m.list.focusedCellIndex)

    row = m.list.content@.getChild(m.list.focusedRowIndex - 1)
    if row <> invalid
      row@.appendChild(item)
    end if
    return true
  end function

  private function onKeyPressFastForward() as boolean
    ? " MOVE A CELL TO NEXT"
    row = m.list.content@.getChild(m.list.focusedRowIndex)
    item = row@.getChild(m.list.focusedCellIndex)

    row = m.list.content@.getChild(m.list.focusedRowIndex + 1)
    row@.setNotificationsEnabled(false)
    if row <> invalid
      row@.appendChild(item)
      row@.setNotificationsEnabled(true)
      m.list@.synchronizeContent()
    end if
    return true
  end function


  private function onKeyPressUp() as boolean
    ? "FOCUS ON BUTTON"
    m.setFocus(m.button)
    return true
  end function

  private function onKeyPressDown() as boolean
    '    ? "FOCUS ON LIST"
    m.setFocus(m.list)
    return true
  end function


  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Lifecycle Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onShow()
    super.onShow()
    m.list.isHidden = false
    m.setFocus(m.list)
  end function

  protected override function onHide()
    super.onHide()
    m.list.isHidden = true
  end function

  protected override function onGainedFocus(isSelfFocused as boolean)
    super.onGainedFocus(isSelfFocused)
    m.log.info("onGainedFocus", isSelfFocused)

    if isSelfFocused
      m.setFocus(m.list)
    end if
  end function

end class
