import "pkg:/source/roku_modules/maestro/view/BaseScreen.brs"
import "pkg:/source/roku_modules/maestro/core/Utils.brs"
import "pkg:/source/roku_modules/maestro/core/DebugTimer.brs"
import "pkg:/source/roku_modules/maestro/ml/ListMixin.brs"

@node("ListScreen", "mv_BaseScreen")
class ListScreen extends mv.BaseScreen

  @observer("onRemoveItems")
  @alwaysnotify
  public removeItems = 0

  'views
  private list
  private listHolder
  private bgRect

  'style
  private numberOfRows = 3
  private defaultCellType = "ml_SimpleCell"

  'state
  public componentPool as mc.types.node
  private contentId = 0
  private rowSettings
  private focusSettings
  private cellSettings
  private originalChildren
  private loadingIndicator
  private scrollSpeed = 2

  function new()
    super("ListScreen")
  end function

  protected override function initialize()
    super.initialize()
    translation = [0, 0]
    size = [1920, 1080]

    m.bgRect = m.createSGNode("mv_Rectangle", m.top, "bgRect", {
      translation: translation
      size: size
      color: "#6a307d"
    })
    m.listHolder = m.createSGNode("Group", m.top, "listHolder")
    m.componentPool = m.global.componentPool

    m.list = m.createSGNode("ml_List", m.listHolder, "list", {
      translation: translation
      width: size[0]
      height: size[1]
    })
    mioc.setInstance("list", m.list)
    m.loadingIndicator = m.createSGNode("LoadingIndicator", m.top, "loadingIndicator", {
      isActive: true
      width: 1920
      height: 1080
      backgroundVisible: false
    })
    m.onResetChange()
  end function

  private function onResetChange()
    m.list@.setContent(invalid)
    m.cellSettings = ml.listMixin.createCellSettings("ml_SimpleCell", [320, 130], 30)

    timer = new mc.utils.DebugTimer("list")
    m.rowSettings = ml.listMixin.createRowSettings(m.cellSettings, invalid, 30)


    m.focusSettings = ml.listMixin.createFocusSettings("fixed", [-50, -50, 50, 50])
    ' listSettings = ml.listMixin.createListSettings(3000, 3000)
    listSettings = ml.listMixin.createListSettings()
    ' listSettings.rowCreationStrategy = "all"
    listSettings.rowCreationStrategy = "async"
    listSettings.rowCreationBatchSize = 5
    listSettings.rowCreationBatchDelay = 0.3

    content = ml.listMixin.createListContent(m.focusSettings, m.rowSettings, listSettings)
    items = m.createGridData()
    timer.log("makeData")
    m.setFocus(m.loadingIndicator)
    content@.appendChildren(items)
    timer.log("set content")
    m.originalChildren = content@.getChild(1)@.getChildren()
    m.list@.setContent(content)
    m.list.delegate = m.top

    if m.list.state = "rendered"
      m.onListRenderState("rendered")
      m.loadingIndicator.isActive = false
    else
      m.observe(m.list.state, m.onListRenderState, "value", true)
    end if
  end function

  private function onListRenderState(state as string)
    m.log.info("onListRenderState", state)
    if state = "rendered"
      ' m.setFocus(m.list)
      ' m.list@.moveToRowItemIndex(0, 0)
      ' m.list.visible = true
      m.loadingIndicator.isActive = false
    end if
  end function

  private function createGridData()
    content = []
    ' rowFocusSettings = ml.listMixin.createFocusSettings("fixed", [0, 0, 0, 0])
    rowFocusSettings = ml.listMixin.createFocusSettings("fixed", [0, 0, 0, 0])
    showHero = true

    useComplexRow = false
    useGrids = false

    'TODO - add normal rows around this
    ' for i = 0 to 1
    for i = 0 to 20
      row = createObject("roSGNode", "ml_RowContent")
      row.id = rnd(2147483647).toStr()
      numItems = 5
      if showHero and i = 0 or i = 10 or i = 18
        row0FocusSettings = ml.listMixin.createFocusSettings("fixed", [0, 0, 0, 0])
        if i <> 10
          row0FocusSettings.feedbackStyle = "none"
        end if
        cellSettings = ml.listMixin.createCellSettings("HeroCellEfficient", [1100, 700], 30)
        row.settings = ml.listMixin.createRowSettings(cellSettings, row0FocusSettings)
        row.settings.headerSettings.position = "none"
        row.settings.contentOffset = [400, -30]
        prefix = "HERO"
        row.settings.screenPos = -1
      else if useComplexRow and (i = 3 or i = 8 or i = 14)
        complexFocusSettings = ml.listMixin.createFocusSettings(m.scrollSpeed)
        row.settings = ml.listMixin.createCustomRowSettings("ComplexRowEfficient", 700)

      else if useGrids and (i = 2 or i = 3 or i = 4 or i = 6 or i = 9)
        gridFocusSettings = ml.listMixin.createFocusSettings("floating", [0, 0, 0, 0])
        if i = -2
          numCols = 1
        else
          numCols = 4
        end if

        row.settings = ml.listMixin.createGridRowSettings(m.cellSettings, gridFocusSettings, 30, invalid, 150, numCols, 100, 5, 50)
        row.settings.contentOffset = [100, 30]
        prefix = "GRID"
        ' row.settings.peekNextPixels = 300
        if i = 3
          numItems = 8
        else
          numItems = 10
        end if

      else
        focusSettings = ml.listMixin.createFocusSettings("fixed", [0, 0, 0, 0])
        ' focusSettings = ml.listMixin.createFocusSettings("floating", [0, 0, 0, 0])
        row.settings = ml.listMixin.createRowSettings(m.cellSettings, focusSettings)
        row.settings.contentOffset = [100, 30]
        prefix = "HORIZ"
        ' row.settings.peekNextPixels = 300
        row.settings.screenPos = -1
        if i = 1 or i = 19
          row.settings.screenPos = 800
        else if i = 5 or i = 15
          row.settings.screenPos = 600
        else if i = 3 or i = 7
          row.settings.screenPos = 200
        else if i = 13
          row.settings.screenPos = 50
        end if

        if i = 1
          row.settings.renderStrategy = "all"
          row.settings.numberItemsToRenderAfter = 4
          row.settings.numberItemsToRenderBefore = 4

          numItems = 10
        end if
      end if
      row.title = "ROW " + str(i)
      ' row.settings.screenPos = 400
      content.push(row)
      row@.appendChildren(m.makeItems(m.defaultCellType, numItems, "HORIZ"))
    end for

    return content
  end function

  private function makeItems(cellType as string, number as integer, prefix = "Item" as string)
    items = []
    for i = 0 to number - 1
      items.push(m.makeItem(cellType, `${prefix} ${m.contentId} [${i}]`))
    end for
    return items
  end function

  private function makeItem(cellType as string, title as string) as mc.types.node
    id = rnd(2147483647).toStr()
    child = m.createSGNode("Item", invalid, id, {
      json: {
        title: title
        description: "some really long " + id + "text in here " + id
        posterUrl: "https://picsum.photos/id/" + str(m.contentId mod 1000).trim() + "/340/340"
      }
    })

    child.description = "some really long " + id + "text in here " + id
    child.HDGRIDPOSTERURL = "https://picsum.photos/id/" + str(m.contentId mod 1000).trim() + "/340/340"
    child.title = title
    m.contentId++
    return child
  end function

  private function onRemoveItems(numItems as integer)
    row = m.list.content@.getChild(m.list.focusedRowIndex)
    startIndex = row.length - numItems
    row@.removeChildrenIndex(startIndex, numItems)
  end function

  private function addRow(index as integer)
    rowFocusSettings = ml.listMixin.createFocusSettings("fixed", [0, 0, 0, 0])
    row = createObject("roSGNode", "ml_RowContent")
    rowFocusSettings.feedbackColor = "#F4D42A"
    headerSettings = ml.listMixin.createHeaderSettings([30, 20], 80, "mediumBold,50", "#ffff00")
    cellSettings = ml.listMixin.createCellSettings("ml_SimpleCell", [320, 200], 100)
    row.settings = ml.listMixin.createRowSettings(cellSettings, rowFocusSettings, 30, headerSettings)
    row.settings.contentOffset = [100, 0]

    row.title = "NEW ROW " + m.contentId.toStr()
    row.id = rnd(2147483647).toStr()
    m.contentId++
    row@.appendChildren(m.makeItems(m.defaultCellType, 5))
    m.list.content@.insertChild(row, index)
  end function

  private function removeRow(index as integer)
    m.list.content@.removeChildIndex(index)
  end function

  private function addCell()
    rowContent = m.list.content@.getChild(m.list.focusedRowIndex)
    rowContent@.appendChildren(m.makeItems(m.defaultCellType, 1))
    rowContent@.insertChild(m.makeItems(m.defaultCellType, 1), m.list.focusedCellIndex)
  end function

  private function removeCell()
    rowContent = m.list.content@.getChild(m.list.focusedRowIndex)
    rowContent@.removeChildIndex(m.list.focusedCellIndex)
  end function


  private contentIndex = 0

  private function changeContent()
    m.list@.setContent(invalid)
    ' m.cellSettings = ml.listMixin.createCellSettings("ml_SimpleCell", [480, 50], 30)
    ' m.cellSettings = ml.listMixin.createCellSettings("ml_SimpleCell", [320, 250], 30)
    m.cellSettings = ml.listMixin.createCellSettings("ml_SimpleCell", [320, 130], 30)

    timer = new mc.utils.DebugTimer("list")
    m.rowSettings = ml.listMixin.createRowSettings(m.cellSettings, invalid, 30)

    m.focusSettings = ml.listMixin.createFocusSettings("fixed", [-50, -50, 50, 50])
    ' listSettings = ml.listMixin.createListSettings(3000, 3000)
    listSettings = ml.listMixin.createListSettings()
    ' listSettings.rowCreationStrategy = "all"
    listSettings.rowCreationStrategy = "async"
    listSettings.rowCreationBatchSize = 5
    listSettings.rowCreationBatchDelay = 0.3
    listSettings.renderStrategy = "dynamic"
    ' listSettings.renderStrategy = "all"
    listSettings.numberItemsToRenderAfter = 4
    listSettings.numberItemsToRenderBefore = 4

    content = ml.listMixin.createListContent(m.focusSettings, m.rowSettings, listSettings)

    funcs = [
      "createSimpleData"
      "createData"
      "createSimpleGridData"
      "createMockScreenData"
      "createHeaderOnlyData"
      "createGridData"
    ]
    m.contentIndex = mc.clamp(m.contentIndex + 1, 0, funcs.count() - 1, true)
    items = m[funcs[m.contentIndex]]()
    timer.log("makeData")
    content@.appendChildren(items)
    ' m.list.visible = false
    ' m.list@.setContent(invalid)
    m.originalChildren = content@.getChild(1)@.getChildren()
    m.list@.setContent(content)
    timer.log("set content")
    if m.list.state = "rendered"
      m.onListRenderState("rendered")
      m.loadingIndicator.isActive = false
    else
      m.observe(m.list.state, m.onListRenderState, "value", true)
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Presses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onKeyPressPlay() as boolean
    m.log.info("removing renderers")

    row = m.list.content@.getChild(1)
    row@.setNotificationsEnabled(false)
    row@.clear()
    newItems = [m.originalChildren[0], m.originalChildren[1], m.originalChildren[3], m.originalChildren[2]]

    row@.appendChildren(newItems)

    row@.setNotificationsEnabled(true)
    ' row@.notifyUpdate()
    m.list@.synchronizeContent()
    return true
  end function

  private function onKeyPressFastForward() as boolean
    ' m.addRow(1)
    row = m.list.content@.getChild(1)
    row@.setNotificationsEnabled(false)
    row@.clear()
    newItems = [m.originalChildren[0], m.originalChildren[1], m.originalChildren[3], m.originalChildren[2]]

    row@.appendChildren(newItems)

    row@.setNotificationsEnabled(true)
    ' row@.notifyUpdate()
    m.list@.synchronizeContent()

    return true
  end function


  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ lifecycle
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onShow()
    super.onShow()
    m.list.isHidden = false
    m.setFocus(m.list)
  end function

  protected override function onHide()
    super.onHide()
    m.list.isHidden = true
  end function

  protected override function onGainedFocus(isSelfFocused as boolean)
    super.onGainedFocus(isSelfFocused)
    m.log.info("onGainedFocus", isSelfFocused)

    if isSelfFocused
      m.setFocus(m.list)
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ list delegate
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onCellWillGainFocus(event as ml.ListEvent)
    ' ? "+SCREEN onCellWillGainFocus : R: "; rowIndex ; " I: " ; event.cellIndex
    mioc.setInstance("focusedIndex", {
      row: event.rowIndex
      cell: event.cellIndex
    })
  end function

  private function onCellDidGainFocus(event as ml.ListEvent)
    ' ? "+SCREEN onCellDidGainFocus  : R: "; rowIndex ; " I: " ; event.cellIndex
    mioc.setInstance("focusedIndex", {
      row: event.rowIndex
      cell: event.cellIndex
    })
  end function


  private function onCellDidLoseFocus(event as ml.ListEvent)
    ' ? "+SCREEN onCellDidLoseFocus : R: "; rowIndex ; " I: " ; event.cellIndex
  end function

  private function onRowDidGainFocus(event as ml.ListEvent)
    ' ? "+SCREEN onRowDidGainFocus : R: "; rowIndex ; " D:" ; direction

    row = m.list@.getRowRenderer(event.rowIndex)
    if row <> invalid
      mioc.setInstance("focusedIndex", {
        row: event.rowIndex
        cell: row.focusedCellIndex
      })
    else
      mioc.setInstance("focusedIndex", {
        row: -1
        cell: -1
      })

    end if

    ' if direction = -1
    '   row = m.list@.getRowRenderer(event.rowIndex)
    '   row.opacity = 1
    ' end if
  end function

  private function onRowDidLoseFocus(event as ml.ListEvent)
    ' ? "+SCREEN onRowDidLoseFocus : R: "; rowIndex ; " D:" ; direction

    ' row = m.list@.getRowRenderer(event.rowIndex)
    ' if direction = 1
    '   row.opacity = 0
    ' end if

  end function

  private function onRowGainingFocus(event as ml.ListEvent)
    ' ? "+SCREEN onRowGainingFocus : R: "; rowIndex ; " D:" ; direction ; " F: " ; fraction
    ' if direction = -1
    '   row = m.list@.getRowRenderer(event.rowIndex)
    '   row.opacity = fraction
    ' end if
  end function

  private function onRowLosingFocus(event as ml.ListEvent)
    ' ? "+ onRowLosingFocus : R: "; rowIndex ; " D:" ; direction ; " F: " ; fraction
    ' if direction = 1
    '   row = m.list@.getRowRenderer(event.rowIndex)
    '   row.opacity = 1 - fraction
    ' end if

  end function
  private function onCellGainingFocus(event as ml.ListEvent)
    ' ? "+SCREEN onCellGainingFocus : R: "; rowIndex ; " C " ; cellIndex; " D:" ; direction ; " F: " ; fraction
    ' if direction = -1
    '   row = m.list@.getRowRenderer(event.rowIndex)
    '   row.opacity = fraction
    ' end if
  end function

  private function onCellLosingFocus(event as ml.ListEvent)
    ' ? "+ onRowLosingFocus : R: "; rowIndex ; " D:" ; " C " ; cellIndex; direction ; " F: " ; fraction
    ' if direction = 1
    '   row = m.list@.getRowRenderer(event.rowIndex)
    '   row.opacity = 1 - fraction
    ' end if

  end function

  private function onItemSelected(event as ml.ListEvent)
    ' ? ">>>onItemSelected changed to:" ; rowIndex ; "," ; event.cellIndex
    rowContent = m.list.content@.getChild(event.rowIndex)
    title = `NEW Item ${m.contentId}`
    child = m.makeItem("SimpleCell", title)
    rowContent@.insertChild(child, event.cellIndex)
    ' rowContent@.removeChild(child)
    row = m.list@.getRowRenderer(event.rowIndex)
    row@.forceUpdate()
    ' newScreen = createObject("roSGNode", "ListScreen")
    ' m.push(newScreen)
    ' m.setFocus(newScreen)
  end function

end class
