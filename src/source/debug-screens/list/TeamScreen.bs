import "pkg:/source/roku_modules/maestro/view/BaseScreen.brs"
import "pkg:/source/roku_modules/maestro/core/Utils.brs"
import "pkg:/source/roku_modules/maestro/ml/ListMixin.brs"
import "pkg:/source/roku_modules/maestro/core/DebugTimer.brs"

namespace ml.sample
  @node("TeamScreen", "mv_BaseScreen")
  class TeamScreen extends mv.BaseScreen

    'views
    private list
    private listHolder
    private bgRect

    'style
    private defaultCellType = "ml_SimpleCell"

    'state
    public componentPool as mc.types.node
    private contentId = 0
    private rowSettings
    private focusSettings
    private cellSettings
    private loadingIndicator
    private favoriteModule as mc.types.node
    private followingModule as mc.types.node
    private teamsModule as mc.types.node
    private scrollSpeed = 0.75
    private numberItemsToRenderAfter = 5
    private numberItemsToRenderBefore = 2

    function new()
      super("TeamScreen")
    end function

    protected override function initialize()
      super.initialize()
      translation = [0, 0]
      size = [1920, 1080]

      m.bgRect = m.createSGNode("mv_Rectangle", m.top, "bgRect", {
        translation: translation
        size: size
        color: "#6a307d"
      })
      m.listHolder = m.createSGNode("Group", m.top, "listHolder")
      m.componentPool = m.global.componentPool

      m.list = m.createSGNode("ml_List", m.listHolder, "list", {
        translation: translation
        width: size[0]
        height: size[1]
      })

      mioc.setInstance("list", m.list)
      m.loadingIndicator = m.createSGNode("LoadingIndicator", m.top, "loadingIndicator", {
        isActive: true
        width: 1920
        height: 1080
        backgroundVisible: false
      })
      m.onResetChange()
    end function

    private function onResetChange()
      m.list@.setContent(invalid)
      m.cellSettings = ml.listMixin.createCellSettings("ml_SimpleCell", [307, 100], 30)

      timer = new mc.utils.DebugTimer("list")
      m.rowSettings = ml.listMixin.createRowSettings(m.cellSettings, invalid, 30)
      listSettings = ml.listMixin.createListSettings()
      listSettings.rowCreationStrategy = "async"
      listSettings.rowCreationBatchSize = 10
      listSettings.rowCreationBatchDelay = 0.1
      listSettings.renderStrategy = "dynamic"
      ' listSettings.renderStrategy = "all"
      listSettings.numberItemsToRenderAfter = m.numberItemsToRenderAfter
      listSettings.numberItemsToRenderBefore = m.numberItemsToRenderBefore

      focusSettings = ml.listMixin.createFocusSettings(m.scrollSpeed)
      content = ml.listMixin.createListContent(focusSettings, m.rowSettings, listSettings)
      items = m.createData()
      timer.log("makeData")
      m.setFocus(m.loadingIndicator)
      content@.appendChildren(items)
      content@.setNotificationsEnabled(false)
      m.list.visible = false
      m.list@.setContent(content)
      m.list.delegate = m.top
      timer.log("set content")
      if m.list.state = "rendered"
        m.onListRenderState("rendered")
        m.loadingIndicator.isActive = false
      else
        m.observeNodeField(m.list, "state", m.onListRenderState, "value", true)
      end if
    end function

    private function onListRenderState(state as string)
      m.log.info("onListRenderState", state)
      if state = "rendered"
        m.setFocus(m.list)
        m.list@.moveToIndex([0, 0], false)
        m.list.visible = true
        m.loadingIndicator.isActive = false
        ' m.list.clippingRect = [0, -5000, 20000, 20000]
        ' m.list.translation = [0, 300]
        ' m.list.scale = [0.5, 0.5]

      end if
    end function

    private function createData()
      content = []
      favoriteFocusSettings = ml.listMixin.createFocusSettings("fixed")
      headerSettings = ml.listMixin.createHeaderSettings([30, 20], 100, "mediumBold,50", "#ffff00")
      row = createObject("roSGNode", "ml_RowContent")
      row.title = "FAVORITE TEAM"
      row.id = rnd(2147483647).toStr()
      row.settings = ml.listMixin.createRowSettings(m.cellSettings, favoriteFocusSettings, 30, headerSettings)
      row.settings.contentOffset = [200, 0]
      numItems = 1
      content.push(row)
      m.favoriteModule = row
      rowFocusSettings = ml.listMixin.createFocusSettings()
      row@.appendChildren(m.makeItems(m.defaultCellType, numItems))

      row = createObject("roSGNode", "ml_RowContent")
      row.title = "FOLLOWING"
      row.id = rnd(2147483647).toStr()
      row.settings = ml.listMixin.createGridRowSettings(m.cellSettings, rowFocusSettings, 30, invalid, 150, 3, 100, 5, 50)
      row.settings.contentOffset = [200, 0]
      numItems = 5
      content.push(row)
      m.followingModule = row
      row@.appendChildren(m.makeItems(m.defaultCellType, numItems))

      row = createObject("roSGNode", "ml_RowContent")
      row.title = "TEAMS"
      row.id = rnd(2147483647).toStr()
      longCellSettings = ml.listMixin.createCellSettings("LongCell", [1192, 144], 40)
      gridFocusSettings = ml.listMixin.createFocusSettings("floating", invalid, "underneath", "fixed")
      gridFocusSettings.feedbackUri = "pkg:/images/solid.9.png"
      gridFocusSettings.feedbackColor = "#aaaaaa"
      ' row.settings = ml.listMixin.createRowSettings(m.cellSettings, rowFocusSettings, 30, headerSettings, 200)
      row.settings = ml.listMixin.createGridRowSettings(longCellSettings, gridFocusSettings, 30, headerSettings, 100, 1, 144, 4, 150)
      row.settings.contentOffset = [200, 30]
      numItems = 20
      content.push(row)
      m.teamsModule = row
      row@.appendChildren(m.makeItems(m.defaultCellType, numItems))
      return content
    end function

    private function makeItems(cellType as string, number as integer)
      items = []
      for i = 0 to number - 1
        items.push(m.makeItem(cellType, `Team ${m.contentId}`))
      end for
      return items
    end function

    private function makeItem(cellType as string, title as string) as mc.types.node
      child = createObject("roSGNode", "ContentNode")
      id = str(m.contentId).trim()
      ' child.id = rnd(2147483647).toStr()
      child.id = id
      child.description = "some really long " + id + "text in here " + id
      child.HDGRIDPOSTERURL = "https://picsum.photos/id/" + str(m.contentId mod 1000).trim() + "/340/340"
      child.title = title
      m.contentId++
      return child
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ lifecycle
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function onShow()
      super.onShow()
      m.list.isHidden = false
      m.setFocus(m.list)
    end function

    protected override function onHide()
      super.onHide()
      m.list.isHidden = true
    end function

    protected override function onGainedFocus(isSelfFocused as boolean)
      super.onGainedFocus(isSelfFocused)
      m.log.info("onGainedFocus", isSelfFocused)

      if isSelfFocused
        m.setFocus(m.list)
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function unFollowTeam(index as integer) as void

      team = m.followingModule@.getChild(index)
      if team = invalid
        return
      end if

      ? "un-follow ", team.title " ID " team.id

      m.teamsModule@.setNotificationsEnabled(false)
      m.followingModule@.setNotificationsEnabled(false)

      m.followingModule@.removeChildIndex(index)
      m.teamsModule@.insertChild(team, 0)
      m.teamsModule@.sortByKey("title")

      m.teamsModule@.setNotificationsEnabled(true)
      m.followingModule@.setNotificationsEnabled(true)
      m.list@.synchronizeContent()
    end function

    private function selectFavorite()
      team = m.followingModule@.getChild(0)
      ? "selected fave>>>>>:", mc.dv(team)
      m.teamsModule@.setNotificationsEnabled(false)
      m.favoriteModule@.setNotificationsEnabled(false)
      m.favoriteModule@.clear()
      if team <> invalid
        'we need a clone, because this team will show in 2 modules
        team = team.clone(true)
        m.favoriteModule@.appendChild(team)
      end if
      m.teamsModule@.setNotificationsEnabled(true)
      m.favoriteModule@.setNotificationsEnabled(true)
      m.list@.synchronizeContent()
    end function

    private function followTeam(cellIndex as integer) as void
      team = m.teamsModule@.getChild(cellIndex)
      if team = invalid
        return
      end if

      ? "follow ", team.title
      m.teamsModule@.setNotificationsEnabled(false)
      m.followingModule@.setNotificationsEnabled(false)
      m.followingModule@.insertChild(team, 0)
      m.teamsModule@.removeChild(team)

      ' m.followingModule.isHidden = m.followingModule.length = 0
      ' m.teamsModule.isHidden = m.teamsModule.length = 0
      m.teamsModule@.setNotificationsEnabled(true)
      m.followingModule@.setNotificationsEnabled(true)
      m.list.content@.notifyUpdate()
      m.list@.synchronizeContent()
      ? "followingModule : ", m.followingModule.length
      ? "teamsModule : ", m.teamsModule.length
      ' if m.teamsModule.isHidden
      '   ? " TEAMS IS HIDDEN"
      '   m.list@.moveToIndex([1, 0])
      ' end if
      ' m.list@.moveToIndex([2, index])

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ List Delegate
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onItemSelected(event as ml.ListEvent)
      row = m.list.content@.getChild(event.rowIndex)
      ? " ITEM IS SELECTED r ", event.rowIndex, "i ", event.cellIndex, " ", mc.dv(row)
      if m.favoriteModule.isSameNode(row)
        ? "SELECT FAVE"
        m.selectFavorite()
      else if m.followingModule.isSameNode(row)
        ? "UN-FOLLOW"
        m.unFollowTeam(event.cellIndex)
      else if m.teamsModule.isSameNode(row)
        ? " FOLLOW"
        m.followTeam(event.cellIndex)
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ List Delegate Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    private function onRowDidGainFocus(event as ml.ListEvent)
      m.log.info("onRowDidGainFocus : R: ", event.rowIndex, "SR: ", event.subRowIndex, " D:", event.direction)

      row = m.list@.getRowRenderer(event.rowIndex)
      if row <> invalid
        mioc.setInstance("focusedIndex", {
          row: event.rowIndex
          cell: row.focusedCellIndex
        })
      else
        mioc.setInstance("focusedIndex", {
          row: -1
          cell: -1
        })

      end if

      ' if event.direction = -1
      '   row = m.list@.getRowRenderer(event.rowIndex)
      '   row.opacity = 1
      ' end if
    end function

    private function onRowDidLoseFocus(event as ml.ListEvent)
      m.log.info("onRowDidLoseFocus : R: ", event.rowIndex, "SR: ", event.subRowIndex, " D:", event.direction)

      ' row = m.list@.getRowRenderer(event.rowIndex)
      ' if event.direction = 1
      '   row.opacity = 0
      ' end if

    end function

    private function onRowGainingFocus(event as ml.ListEvent)
      m.log.info("onRowGainingFocus : R: ", event.rowIndex, "SR: ", event.subRowIndex, " D:", event.direction, " F: ", event.fraction)
      ' if event.direction = -1
      '   row = m.list@.getRowRenderer(event.rowIndex)
      '   row.opacity = event.fraction
      ' end if
    end function

    private function onRowLosingFocus(event as ml.ListEvent)
      m.log.info(": R: ", event.rowIndex, "SR: ", event.subRowIndex, " D:", event.direction, " F: ", event.fraction)
      ' if event.direction = 1
      '   row = m.list@.getRowRenderer(event.rowIndex)
      '   row.opacity = 1 - event.fraction
      ' end if
    end function

    private function onCellWillGainFocus(event as ml.ListEvent)
      m.log.info("onCellWillGainFocus : R: ", event.rowIndex, " I: ", event.cellIndex, " D:", event.direction)
      mioc.setInstance("focusedIndex", {
        row: event.rowIndex
        cell: event.cellIndex
      })
    end function

    private function onCellDidGainFocus(event as ml.ListEvent)
      m.log.info("onCellDidGainFocus  : R: ", event.rowIndex, " I: ", event.cellIndex, " D:", event.direction)
      mioc.setInstance("focusedIndex", {
        row: event.rowIndex
        cell: event.cellIndex
      })
    end function

    private function onCellWillLoseFocus(event as ml.ListEvent)
      m.log.info("onCellWillLoseFocus : R: ", event.rowIndex, " I: ", event.cellIndex, " D:", event.direction)
    end function

    private function onCellDidLoseFocus(event as ml.ListEvent)
      m.log.info("onCellDidLoseFocus : R: ", event.rowIndex, " I: ", event.cellIndex, " D:", event.direction)
    end function

    private function onCellGainingFocus(event as ml.ListEvent)
      m.log.info("onCellGainingFocus : R: ", event.rowIndex, " C ", event.cellIndex, " D:", event.direction, " F: ", event.fraction)
      ' if event.direction = -1
      '   row = m.list@.getRowRenderer(event.rowIndex)
      '   row.opacity = event.fraction
      ' end if
    end function

    private function onCellLosingFocus(event as ml.ListEvent)
      m.log.info("onCellLosingFocus : R: ", event.rowIndex, " C ", event.cellIndex, " D:", event.direction, " F: ", event.fraction)
      ' if event.direction = 1
      '   row = m.list@.getRowRenderer(event.rowIndex)
      '   row.opacity = 1 - event.fraction
      ' end if
    end function

  end class
end namespace
