import "pkg:/source/roku_modules/maestro/view/BaseScreen.brs"
import "pkg:/source/roku_modules/maestro/core/Utils.brs"
import "pkg:/source/roku_modules/maestro/ml/ListMixin.brs"
import "pkg:/source/roku_modules/maestro/core/DebugTimer.brs"

@node("UpdateGridItemsScreen", "mv_BaseScreen")
class UpdateGridItemsScreen extends mv.BaseScreen

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Views
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private list as mc.types.node
  private menu as mc.types.node

  'buttons
  private listUpdateActiveButton as mc.types.node
  private applyChangeButton as mc.types.node
  private moveItemUpButton as mc.types.node
  private moveItemDownButton as mc.types.node

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Fields
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public componentPool as mc.types.node
  private contentId = 0
  private rowSettings
  private focusSettings
  private cellSettings
  private loadingIndicator
  private scrollSpeed = 2
  private numberOfRows = 20
  private defaultCellType = "ml_SimpleCell"

  private isListActive = true
  private isRowSelectionMode = false
  private firstItem = invalid
  private dataIndex = 0
  private selectedRow as mc.types.node
  private selectedRowIndex as integer
  private selectedItemIndex as integer
  private selectedItem as mc.types.node

  private rows = []

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Initialization
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function new()
    super("UpdateGridItemsScreen")
  end function

  protected override function initialize()
    super.initialize()
    bundle = m.styleManager@.loadBundle("pkg:/source/debug-screens/list/UpdateGridItemsScreen.json")
    m.createViewsFromStyleJson(bundle.views)
    m.resetData()

    m.list.delegate = m.top
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Callbacks
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onMenuItemChange(index as integer)
    m.log.info("selected tab item", index)
    button = m.menu@.getSelectedButton()
    if button.isSameNode(m.listUpdateActiveButton)
      m.log.info("resetting")
      m.isListActive = not m.isListActive
      m.listUpdateActiveButton.text = `List updates: ${m.isListActive ? "On": "Off"}`
      m.list@.setUpdatesEnabled(m.isListActive)
    else if button.isSameNode(m.applyChangeButton)
      m.log.info("applying changes")
      m.reload()
    else if button.isSameNode(m.moveItemUpButton)
      m.log.info("moving an item up")
      m.moveItem(-1)
    else if button.isSameNode(m.moveItemDownButton)
      m.log.info("moving an item down")
      m.moveItem(1)
    end if
    button.isSelected = false
  end function

  private function moveItem(direction as integer)
    if m.selectedItem <> invalid
      nextIndex = m.selectedRowIndex + direction
      nextRow = m.rows[nextIndex]
      if nextRow <> invalid
        m.selectedRowIndex = nextIndex
        m.log.info("moving item", mc.dv(m.selectedItem), "to row", nextIndex)

        if m.isRowSelectionMode
          m.log.warn("moving entire row")
          children = []
          for i = m.selectedItemIndex to m.selectedItemIndex + 3
            children.push(m.selectedRow@.getChild(i))
            m.selectedRow@.removeChildIndex(i)
          end for
          nextRow@.appendChildren(children)
        else
          nextRow@.appendChild(m.selectedItem)
        end if

      else
        m.log.error("no next row at index", nextIndex)
      end if
    else
      m.log.error("no item selected")
    end if
  end function
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ List Data - Initialization
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function resetData()
    m.cellSettings = ml.listMixin.createCellSettings("SimpleCell", [307, 100], 30)
    m.makeListData()
    m.reload()
  end function

  private function makeListData()
    m.list@.setContent(invalid)

    timer = new mc.utils.DebugTimer("list")

    m.rowSettings = ml.listMixin.createRowSettings(m.cellSettings, invalid, 30)

    m.focusSettings = ml.listMixin.createFocusSettings("fixed", [-50, -50, 50, 50])
    listSettings = ml.listMixin.createListSettings()
    listSettings.rowCreationStrategy = "async"
    listSettings.rowCreationBatchSize = 5
    listSettings.rowCreationBatchDelay = 0.3
    listSettings.numberItemsToRenderAfter = 5
    listSettings.numberItemsToRenderBefore = 5
    listSettings.renderStrategy = "dynamic"

    content = ml.listMixin.createListContent(m.focusSettings, m.rowSettings, listSettings)
    content@.setNotificationsEnabled(false)
    timer.log("makeData")

    m.setFocus(m.loadingIndicator)

    m.list@.setContent(content)

    timer.log("set content")
    if m.list.state = "rendered"
      m.onListRenderState("rendered")
      m.loadingIndicator.isActive = false
    else
      m.observeNodeField(m.list, "state", m.onListRenderState, "value", true)
    end if
  end function

  private function onListRenderState(state as string)
    m.log.info("onListRenderState", state)
    if state = "rendered"
      m.setFocus(m.list)
      m.list@.moveToRowItemIndex(0, 0)
      m.loadingIndicator.isActive = false
    end if
  end function

  private function createRow(title as string, numItems as integer)
    numCols = 4
    row = createObject("roSGNode", "ml_RowContent")
    row.id = rnd(2147483647).toStr()

    m.log.info("is using grids")
    gridFocusSettings = ml.listMixin.createFocusSettings("floating", [0, 0, 0, 0])
    row.settings = ml.listMixin.createGridRowSettings(m.cellSettings, gridFocusSettings, 30, invalid, 70, numCols, 100, 5, 50)
    row.firstRowScreenPos = 70
    row.otherRowScreenPos = 70

    row.settings.contentOffset = [100, 30]
    numItems = rnd(5) + 6
    row.title = title
    row@.appendChildren(m.makeItems(m.defaultCellType, numItems, ""))
    return row
  end function

  private function addItems(cellType as string, number as integer)
    row = m.list.content@.getChild(m.list.focusedRowIndex)
    row@.appendChildren(m.makeItems(cellType, number))
  end function

  private function makeItems(cellType as string, number as integer, prefix = "Item" as string)
    items = []
    for i = 0 to number - 1
      items.push(m.makeItem(cellType, `${prefix} ${m.contentId} [${i}]`))
    end for
    return items
  end function

  private function makeItem(cellType as string, title as string) as mc.types.node
    id = str(m.contentId).trim()
    child = m.createSGNode("Item", invalid, id, {
      json: {
        title: title
        description: "some really long " + id + "text in here " + id
        posterUrl: "https://picsum.photos/id/" + str(m.contentId mod 1000).trim() + "/340/340"
      }
    })
    m.contentId++
    return child
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function reload()
    m.removeNonHeaderRows(false)
    m.rows = [
      m.createRow("live", 5)
      m.createRow("upcoming", 5)
      m.createRow("complete", 5)
    ]

    m.list.content@.insertChildren(m.rows, 0)
    m.list.content@.notifyUpdate()
    m.list@.synchronizeContent()
  end function

  private function removeNonHeaderRows(update = true as boolean)
    header = m.list.content@.getChild(0)
    m.list.content@.setNotificationsEnabled(false)
    m.list.content@.clear()
    m.list.content@.appendChild(header)

    if update
      m.list.content@.notifyUpdate()
      m.list@.synchronizeContent()
    end if
  end function

  private function setRowOpacity(rowIndex as integer, fraction as float, direction as integer)
    'FIXME - need to have separate callback for subrows too

    ' row = m.list@.getRowRenderer(rowIndex)
    ' if rowIndex = 0
    '   row.opacity = 1
    ' else if row.subType() <> "ml_GridRow"
    '   row.opacity = opacity
    ' else
    '   if applyToAll
    '     startIndex = 0
    '     endIndex = row.content.length - 1
    '   else
    '     'TODO(gcook): maestro-list will have delegate callbacks for subRowIndex changes in future, so this kind of calculation won't be required
    '     startIndex = mc.clamp((m.list.focusedSubRowIndex - (direction = -1 ? 1 : 0)) * 4, 0, row.content.length - 1)
    '     endIndex = mc.clamp(startIndex + 3, 0, row.content.length - 1)
    '   end if
    '   for i = startIndex to endIndex
    '     cell = m.list@.getCellRenderer(event.rowIndex, i)
    '     if cell <> invalid
    '       cell.opacity = opacity
    '     end if
    '   end for
    ' end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ List Delegate
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onItemSelected(event as ml.ListEvent)
    m.selectedRowIndex = event.rowIndex
    m.selectedRow = m.rows[event.rowIndex]
    m.selectedItem = m.selectedRow@.getChild(event.cellIndex)
    m.selectedItemIndex = event.cellIndex
    m.log.info("selected item ", mc.dv(m.selectedItem), "from row", mc.dv(m.selectedRow))

  end function

  private function onRowDidGainFocus(event as ml.ListEvent)
    if event.direction = -1
      m.setRowOpacity(event.rowIndex, 1, event.direction)
    end if
  end function

  private function onRowDidLoseFocus(event as ml.ListEvent)
    if event.direction = 1
      m.setRowOpacity(event.rowIndex, 0, event.direction)
    end if
  end function

  private function onRowWillLoseFocus(event as ml.ListEvent)
  end function

  private function onRowGainingFocus(event as ml.ListEvent)
    if event.direction = -1
      m.setRowOpacity(event.rowIndex, event.fraction, event.direction)
    end if
  end function

  private function onRowLosingFocus(event as ml.ListEvent)
    if event.direction = 1
      m.setRowOpacity(event.rowIndex, 1 - event.fraction, event.direction)
    end if
  end function

  private function toggleListUpdates(enabled as boolean)
    m.log.info("Setting list updates to ", enabled)
    m.list@.setUpdatesEnabled(enabled)
  end function

  private function changeContent()
    row = m.list@.getRow(1)
    child = m.makeItem(m.defaultCellType, "New item")
    row@.insertChild(child, 0)

    child = m.makeItem(m.defaultCellType, "Second New item")
    row@.insertChild(child, 1)

    row = m.list@.getRow(3)
    row@.removeChildrenIndex(row.length - 1, 0)
  end function

  private function onKeyPressFastForward() as boolean
    m.moveItem(1)
    return true
  end function

  private function onKeyPressRewind() as boolean
    m.moveItem(-1)
    return true
  end function

  private function onKeyPressPlay() as boolean
    m.isRowSelectionMode = not m.isRowSelectionMode
    m.log.info("row selection mode is now: ", m.isRowSelectionMode)
    return true
  end function
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Presses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function isCapturingAnyKeyPress(key as string, press as boolean) as boolean
    return key <> "back"
  end function

  protected override function onKeyPressBack() as boolean
    if m.isControlFocused(m.menu)
      super.onKeyPressBack()
    else
      m.setFocus(m.menu)
    end if
    return true
  end function

  private function onKeyPressUp() as boolean
    m.setFocus(m.menu)
    return true
  end function

  private function onKeyPressDown() as boolean
    m.setFocus(m.list)
    return true
  end function


  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Lifecycle
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onShow()
    super.onShow()
    m.list.isHidden = false
    m.setFocus(m.list)
  end function

  protected override function onHide()
    super.onHide()
    m.list.isHidden = true
  end function

  protected override function onGainedFocus(isSelfFocused as boolean)
    super.onGainedFocus(isSelfFocused)
    m.log.info("onGainedFocus", isSelfFocused)

    if isSelfFocused
      m.setFocus(m.list)
    end if
  end function

end class
