import "pkg:/source/roku_modules/maestro/ml/cells/BaseCell.brs"
import "pkg:/source/roku_modules/maestro/core/Utils.brs"
import "pkg:/source/roku_modules/maestro/view/Animation.brs"

@node("HeroCellEfficient", "ml_BaseCell")
class HeroCellEfficient extends ml.BaseCell

  private poster
  private bgRect
  private textRect

  private isViewCreated = false
  private label
  private labelGroup
  private labelAnim
  private size = [1100, 700]
  private scale = 1
  private isLabelVisible = false

  function new()
    super()
    m.createViews()
  end function

  protected override function createViews() as void
    m.bgRect = mc.createSGNode("mv_Rectangle", m.top, "bgRect", {
      size: m.size
      color: "#000000"
    })
    m.poster = mc.createSGNode("mv_Poster", m.top, "poster", {
      translation: [0, 0]
      ' loadingBitmapUri: "http://via.placeholder.com/1700x700"
      ' failedBitmapUri: "http://via.placeholder.com/1700x700"
      ' uri: "http://via.placeholder.com/1700x700"
      loadWidth: m.size[0]
      loadHeight: m.size[1]
      size: m.size
      loadDisplayMode: "zoomToFill"
    })
    m.labelGroup = mc.createSGNode("Group", m.top, "labelGroup", {

    })
    m.textRect = mc.createSGNode("Rectangle", m.labelGroup, "bgRect", {
      size: m.size
      color: "#000000"
      opacity: 0.5
      translation: [0, 250]
      size: [m.size[0], 300]
    })
    m.label = mc.createSGNode("Label", m.labelGroup, "label", {
      fontKey: "mediumBold,60"
      horizAlign: "center"
      vertAlign: "center"
      color: "#ffffff"
      translation: [0, 300]
      size: [m.size[0], 100]
    })
    if m.global.fontManager <> invalid and m.global.styleManager <> invalid
      fontKey = m.global.styleManager@.getStyleValue("~" + "mediumBold,60")
      m.label.font = m.global.fontManager@.getFontWithKey(fontKey)
    end if
    m.labelAnim = new mv.animations.Fade(m.labelGroup, 0.2, 1, 0)
  end function

  private function update(content as mc.types.node)
    m.poster.width = m.size[0]
    m.poster.height = m.size[1]
    m.setFocusState(0, true)

    m.poster.uri = content.HDGRIDPOSTERURL
    m.label.text = `${m.top.translation[0]} : ${m.index}`
  end function

  private function toggleLabelVisible(visible as boolean) as void
    if m.isLabelVisible <> visible
      m.isLabelVisible = visible
      if visible
        m.labelAnim.animateTo(1, 0.2)
      else
        m.labelAnim.animateTo(0, 0.2)
      end if
      m.labelAnim.start()
    end if
  end function

  protected override function onShowWithContent(content as mc.types.node)
    m.update(content)
  end function

  protected override function onHide()
    m.poster.uri = m.poster.loadingBitmapUri
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ delegate
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onScrollingChange(isScrolling as boolean, isLong as boolean)
    if not isScrolling
      m.toggleLabelVisible(true)
    end if
  end function

  private function onScrollingUpdate(startIndex as integer, currentIndex as integer)
    m.toggleLabelVisible(abs(startIndex - currentIndex) < 2)
  end function


  private function onDidGainFocus(event as ml.ListEvent)
    ' ? " HERO ODGF " ; m.index ; " D " ; direction
    m.setFocusState(1, true)
  end function

  private function onDidLoseFocus(event as ml.ListEvent)
    ' ? " HERO ODLF " ; m.index ; " D " ; direction
    m.setFocusState(1, false)
  end function

  private function onGainingFocus(event as ml.ListEvent)
    ' ? " HERO OGF " ; m.index ; " D " ; direction; " f " ; fraction
    m.setFocusState(event.fraction, true)
  end function

  private function onLosingFocus(event as ml.ListEvent)
    ' ? " HERO OLF " ; m.index ; " D " ; direction; " f " ; event.fraction
    m.setFocusState(event.fraction, false)
  end function

  private function setFocusState(fraction as float, isGaining as boolean) as void

    if fraction > 1
      fraction = 1
    end if
    if isGaining
      m.poster.opacity = 0.3 + fraction
      ' m.label.text = `${m.index} G: ${fraction}`
    else
      m.poster.opacity = 0.3 + (1 - fraction)
      ' ? "OPACITY " ; m.poster.opacity
      ' m.label.text = `${m.index} L: ${fraction}`
    end if
  end function
end class
