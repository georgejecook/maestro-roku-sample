import "pkg:/source/roku_modules/maestro/view/BaseCell.brs"
namespace sample
  @node("SimpleCell", "ml_BaseCell")
  class SimpleCell extends ml.BaseCell

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Views
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private poster as mc.types.node
    private rectangle as mc.types.node
    private label as mc.types.node

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private styles as mc.types.assocarray
    private scale = 1.0

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Overridden Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function createViews() as void
      bundle = m.global.styleManager@.loadBundle("pkg:/source/cells/SimpleCell.bundle")
      m.styles = bundle.styles
      m.createViewsFromStyleJson(bundle.views)
    end function

    protected override function onContentChange(content as mc.types.node)
      m.label.text = mc.getString(content, "json.title")
      m.poster.uri = mc.getString(content, "json.posterUrl")
      m.label.visible = true
      m.setScale(1, false)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function toggleHighlighted(highlighted as boolean)
      if highlighted
        m.updateViewsWithStyleJson(m.styles.normal)
      else
        m.updateViewsWithStyleJson(m.styles.highlighted)
      end if
    end function

    private function setScale(fraction as float, isGaining as boolean) as void
      if isGaining
        m.scale = mc.clamp((fraction + 0.8), 0.7, 1.0)
      else
        m.scale = mc.clamp((1 - fraction) + 0.3, 0.7, 1.0)
      end if

      m.poster.scale = [m.scale, m.scale]
    end function


    protected override function onShowWithContent(content as mc.types.node)
      m.toggleHighlighted(false)
    end function

    protected override function onHide()
      m.toggleHighlighted(true)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Delegate Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onScrollingChange(isScrolling as boolean, isLong as boolean)
      ' ? "SC: isScrolling " ; " " ; isScrolling ; " IL " ; isLong
      if not isScrolling
        m.label.visible = true
      end if
    end function

    private function onScrollingUpdate(startIndex as integer, currentIndex as integer)
      ' ? "SC: isScrolling UPDATE " ; " " ; startIndex ; " SI " ; currentIndex
      textVisible = abs(startIndex - currentIndex) < 4
      m.label.visible = textVisible
    end function

    private function onWillGainFocus(event as ml.ListEvent)
    end function

    private function onWillLoseFocus(event as ml.ListEvent)
      m.toggleHighlighted(false)

    end function

    private function onDidGainFocus(event as ml.ListEvent)
      m.setScale(1, true)
      m.toggleHighlighted(true)
    end function

    private function onDidLoseFocus(event as ml.ListEvent)
      m.setScale(1, false)
      m.toggleHighlighted(false)
    end function

    private function onGainingFocus(event as ml.ListEvent)
      m.setScale(event.fraction, true)
    end function

    private function onLosingFocus(event as ml.ListEvent)
      m.setScale(event.fraction, false)
    end function
  end class
end namespace
