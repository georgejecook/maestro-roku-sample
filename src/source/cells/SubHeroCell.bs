import "pkg:/source/roku_modules/maestro/core/Utils.brs"
import "pkg:/source/roku_modules/maestro/ml/ListMixin.brs"
import "pkg:/source/roku_modules/maestro/ml/RowItemScroller.brs"
import "pkg:/source/roku_modules/maestro/ml/RowItemViewManager.brs"
import "pkg:/source/roku_modules/maestro/view/BaseView.brs"
import "pkg:/source/roku_modules/maestro/ml/cells/BaseCell.brs"

@node("SubHeroCell", "ml_BaseCell")
class SubHeroCell extends ml.BaseCell

  private poster
  private rectangle
  private label
  private bgRect

  private isViewCreated = false
  private posterSize = [450, 320.0]

  function new()
    super()
  end function

  protected override function createViews() as void
    m.bgRect = mc.createSGNode("mv_Rectangle", m.top, "bgRect", {
      size: [m.posterSize[0] * 2, m.posterSize[1]]
      color: "#555555"
    })
    m.poster = mc.createSGNode("mv_Poster", m.top, "poster", {
      translation: [0, 0]
      loadDisplayMode: "scaleToFill"
      loadingBitmapUri: "http://via.placeholder.com/450x320"
      failedBitmapUri: "http://via.placeholder.com/450x320"
      loadWidth: m.posterSize[0]
      loadHeight: m.posterSize[1]
      size: m.posterSize
      uri: "http://via.placeholder.com/450x320"
    })
    m.rectangle = mc.createSGNode("mv_Rectangle", m.top, "rectangle", {
      opacity: 0.4
      color: "#000000"
      width: m.posterSize[0]
      translation: [m.posterSize[0], 0]
      height: 50
    })
    m.label = mc.createSGNode("mv_Label", m.top, "label", {
      width: m.posterSize[0]
      fontKey: "mediumBold,30"
      horizAlign: "left"
      translation: [m.posterSize[0] + 20, 10]
    })
  end function

  protected override function onContentChange(content as mc.types.node)
    m.label.text = "C:" + content.title
    m.label.visible = true
    m.poster.uri = content.HDGRIDPOSTERURL
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ delegate
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onScrollingChange(isScrolling as boolean, isLong as boolean)
    ' ? ">>> OSC i: "; m.index; " s: " ; isScrolling ; " l " ; isLong
    if not isScrolling
      m.label.visible = true
    end if
  end function

  private function onScrollingUpdate(startIndex as integer, currentIndex as integer)
    ' ? ">>> OSU i: "; m.index; " s: " ; startIndex ; " ci " ; currentIndex
    textVisible = abs(startIndex - currentIndex) < 2
    m.label.visible = textVisible
  end function

  private function onWillGainFocus(event as ml.ListEvent)
    ' ? "SC: onCellWillGainFocus " ; " " ; event.direction
  end function

  private function onWillLoseFocus(event as ml.ListEvent)
    ' ? "SC: onCellWillLoseFocus " ; " " ; event.direction
  end function

  private function onDidGainFocus(event as ml.ListEvent)
    ' ? "SC: onCellDidGainFocus " ; " " ; event.direction
  end function

  private function onDidLoseFocus(event as ml.ListEvent)
    ' ? "SC: onCellDidLoseFocus " ; " " ; event.direction
    if event.direction = 1
    end if
  end function

  private function onGainingFocus(event as ml.ListEvent)
    ' ? "SC: onGainingFocus " ; " " ; event.direction ; " "  ; fraction
  end function

  private function onLosingFocus(event as ml.ListEvent)
    ' ? "SC: onLosingFocus " ; " " ; event.direction ; " " ; fraction
    if event.direction = 1
    end if
  end function

end class
