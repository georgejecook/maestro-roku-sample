{
  //rooibos
  "rooibos beforeEach": {
    "prefix": "beforeEach",
    "body": [
      "@beforeEach",
      "function ${2:namespace}_${3:itGroup}_beforeEach()",
      "\t$0",
      "end function"
    ]
  },
  "rooibos afterEach": {
    "prefix": "afterEach",
    "body": [
      "@afterEach",
      "function ${2:namespace}_${3:itGroup}_afterEach()",
      "\t$0",
      "end function"
    ]
  },
  "rooibos setup": {
    "prefix": "setup",
    "body": [
      "@setup",
      "function ${2:namespace}_setup()",
      "\t$0",
      "end function"
    ]
  },
  "rooibos tearDown": {
    "prefix": "tearDown",
    "body": [
      "@tearDown",
      "function ${2:namespace}_tearDown()",
      "\t$0",
      "end function"
    ]
  },
  "rooibos ignore": {
    "prefix": "ignore",
    "body": ["@ignore ${1:reason}", "$0"]
  },
  "rooibos only": {
    "prefix": "only",
    "body": ["@only", "$0"]
  },
  "rooibos testSuite": {
    "prefix": "suite",
    "body": ["@suite(\"$1\")", "$0"]
  },
  "rooibos testcase": {
    "prefix": "it",
    "body": ["@it(\"$1\")", "function _()", "\t$0", "end function"]
  },
  "rooibos params": {
    "prefix": "params",
    "body": ["@params(${1:values})$0"]
  },
  "rooibos it": {
    "prefix": "describe",
    "body": [
      "'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "@describe(\"${1:groupName}\")",
      "'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "$0"
    ]
  },
  "rooibos stub": {
    "prefix": "stub",
    "body": [
      "m.stub(${1:target}, \"${2:methodName}\", [${3:methodArgs}], ${4:result})",
      "$0"
    ]
  },
  "rooibos mock": {
    "prefix": "expect",
    "body": [
      "${1:mockName} = m.mock(${2:target}, \"${3:methodName}\", ${4:expectedNumberOfcalls}, [${5:methodArgs}], ${6:result})",
      "$0"
    ]
  },
  "rooibos expectCalled": {
    "prefix": "expectCalled",
    "body": ["m.expectCalled(${1:invocation}, ${2:result})", "$0"]
  },
  "rooibos stubCall": {
    "prefix": "stubcall",
    "body": ["m.stubCall(${1:invocation})", "$0"]
  },
  "rooibos expectNotCalled": {
    "prefix": "expectNotCalled",
    "body": ["m.expectNotCalled(${1:invocation})", "$0"]
  },
  "rooibos expectObserveNodeField": {
    "prefix": "eonf",
    "body": [
      "m.expectCalled(${1:target}.observeNodeField(${2:node},\"${3:fieldName}\", m.${4:callback}))",
      "$0"
    ]
  },
  "rooibos expectUnObserveNodeField": {
    "prefix": "eunf",
    "body": [
      "m.expectCalled(${1:target}.unobserveNodeField([${2:node},\"${:fieldName}\", m.${4:callback}]))",
      "$0"
    ]
  },
  "rooibos expectObjectOnce": {
    "prefix": "expectObject",
    "body": [
      "${1:name} = { \"id\" : \"${1:name}\" }",
      "m.expectCalled(${2:invocation}, ${1:name})",
      "$0"
    ]
  },
  "rooibos expectGetInstance": {
    "prefix": "expectGetInstance",
    "body": [
      "${1:name} = { \"id\" : \"${1:name}\" }",
      "m.expectCalled(${2:target}.getInstance(\"${3:instanceName}\"), ${1:name})",
      "$0"
    ]
  },
  "rooibos expectCreateSGNode": {
    "prefix": "expectCreateSGNode",
    "body": [
      "${1:name} = { \"id\" : \"${1:name}\" }",
      "m.expectCalled(${2:target}.createSGNode(\"${3:nodeType}\"$0, invalid, \"${1:name}\"), $4)",
      "$0"
    ]
  },
  "rooibos expectGetClassInstance": {
    "prefix": "expectGetClassInstance",
    "body": [
      "${1:name} = { \"id\" : \"${1:name}\" }",
      "m.expectCalled(${2:target}.getClassInstance(\"${3:instanceName}\"), ${1:name})",
      "$0"
    ]
  },
  "rooibos expectExpect": {
    "prefix": "expectExpect",
    "body": [
      "${1:result} = { \"id\" : \"${1:result}\" }",
      "m.expectCalled(${2:targetInvocation}, ${1:result})",
      "m.expectCalled(reuslt.${3:invocation}, ${4:returnValue})",
      "$0"
    ]
  },
  "rooibos assertFalse": {
    "prefix": "assertFalse",
    "body": ["m.assertFalse(${1:value})", "$0"]
  },
  "rooibos assertAsync": {
    "prefix": "assertAsync",
    "body": ["m.AssertAsyncField(${1:value}, $2{:fieldName})", "$0"]
  },
  "rooibos assertTrue": {
    "prefix": "assertTrue",
    "body": ["m.assertTrue(${1:value})", "$0"]
  },
  "rooibos assertEqual": {
    "prefix": "assertEqual",
    "body": ["m.assertEqual(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertLike": {
    "prefix": "assertLike",
    "body": ["m.assertLike(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertNotEqual": {
    "prefix": "assertNotEqual",
    "body": ["m.assertNotEqual(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertInvalid": {
    "prefix": "assertInvalid",
    "body": ["m.assertInvalid(${1:value})", "$0"]
  },
  "rooibos assertNotInvalid": {
    "prefix": "assertNotInvalid",
    "body": ["m.assertNotInvalid(${1:value})", "$0"]
  },
  "rooibos assertAAHasKey": {
    "prefix": "assertAAHasKey",
    "body": ["m.assertAAHasKey(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertAANotHasKey": {
    "prefix": "assertAANotHasKey",
    "body": ["m.assertAANotHasKey(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertAAHasKeys": {
    "prefix": "assertAAHasKeys",
    "body": ["m.assertAAHasKeys(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertAANotHasKeys": {
    "prefix": "assertAANotHasKeys",
    "body": ["m.assertAANotHasKeys(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertArrayContains": {
    "prefix": "assertArrayContains",
    "body": ["m.assertArrayContains(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertArrayNotContains": {
    "prefix": "assertArrayNotContains",
    "body": ["m.assertArrayNotContains(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertArrayContainsSubset": {
    "prefix": "assertArrayContainsSubset",
    "body": ["m.assertArrayContainsSubset(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertArrayContainsAAs": {
    "prefix": "assertArrayContainsAAs",
    "body": ["m.assertArrayContainsAAs(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertArrayNotContainsSubset": {
    "prefix": "assertArrayNotContainsSubset",
    "body": ["m.assertArrayNotContainsSubset(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertArrayCount": {
    "prefix": "assertArrayCount",
    "body": ["m.assertArrayCount(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertArrayNotCount": {
    "prefix": "assertArrayNotCount",
    "body": ["m.assertArrayNotCount(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertEmpty": {
    "prefix": "assertEmpty",
    "body": ["m.assertEmpty(${1:value})", "$0"]
  },
  "rooibos assertNotEmpty": {
    "prefix": "assertNotEmpty",
    "body": ["m.assertNotEmpty(${1:value})", "$0"]
  },
  "rooibos assertArrayContainsOnlyValuesOfType": {
    "prefix": "assertArrayContainsOnlyValuesOfType",
    "body": [
      "m.assertArrayContainsOnlyValuesOfType(${1:value}, ${2:expected})",
      "$0"
    ]
  },
  "rooibos assertType": {
    "prefix": "assertType",
    "body": ["m.assertType(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertSubType": {
    "prefix": "assertSubType",
    "body": ["m.assertSubType(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertNodeCount": {
    "prefix": "assertNodeCount",
    "body": ["m.assertNodeCount(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertNodeNotCount": {
    "prefix": "assertNodeNotCount",
    "body": ["m.assertNodeNotCount(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertNodeEmpty": {
    "prefix": "assertNodeEmpty",
    "body": ["m.assertNodeEmpty(${1:value})", "$0"]
  },
  "rooibos assertNodeNotEmpty": {
    "prefix": "assertNodeNotEmpty",
    "body": ["m.assertNodeNotEmpty(${1:value})", "$0"]
  },
  "rooibos assertNodeContains": {
    "prefix": "assertNodeContains",
    "body": ["m.assertNodeContains(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertNodeNotContains": {
    "prefix": "assertNodeNotContains",
    "body": ["m.assertNodeNotContains(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertNodeContainsFields": {
    "prefix": "assertNodeContainsFields",
    "body": ["m.assertNodeContainsFields(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertNodeNotContainsFields": {
    "prefix": "assertNodeNotContainsFields",
    "body": ["m.assertNodeNotContainsFields(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertAAContainsSubset": {
    "prefix": "assertAAContainsSubset",
    "body": ["m.assertAAContainsSubset(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertMocks": {
    "prefix": "assertMocks",
    "body": ["m.assertMocks(${1:value}, ${2:expected})", "$0"]
  },

  //stub objexts
  "stubobject": {
    "prefix": "so",
    "body": ["${1:name} = { \"id\" : \"${1:name}\" }", "$0"]
  },
  "stubaaobject": {
    "prefix": "aso",
    "body": ["${1:name}: { \"id\" : \"${1:name}\" }", "$0"]
  },
  "stubiocobject": {
    "prefix": "sioc",
    "body": [
      "m.${1:name} = { \"id\" : \"${1:name}\" }",
      "mioc.setInstance(\"${1:name}\", m.${1:name})",
      "$0"
    ]
  },
  "mstubobject": {
    "prefix": "mso",
    "body": ["m.${1:name} = { \"id\" : \"${1:name}\" }", "$0"]
  },
  "m.stubobject": {
    "prefix": "mdso",
    "body": ["m.${1:thing}.${2:name} = { \"id\" : \"${2:name}\" }", "$0"]
  },

  //keys
  "isCapturingAnyKeyPress": {
    "prefix": "isCapturingAnyKeyPress",
    "body": [
      "private function isCapturingAnyKeyPress(key as string, press as boolean) as boolean",
      "\treturn false",
      "end function"
    ]
  },
  "onKeyPressDown": {
    "prefix": "onKeyPressDown",
    "body": [
      "private function onKeyPressDown() as boolean",
      "\treturn false",
      "end function"
    ]
  },
  "onKeyPressUp": {
    "prefix": "onKeyPressUp",
    "body": [
      "private function onKeyPressUp() as boolean",
      "\treturn false",
      "end function"
    ]
  },
  "onKeyPressLeft": {
    "prefix": "onKeyPressLeft",
    "body": [
      "private function onKeyPressLeft() as boolean",
      "\treturn false",
      "end function"
    ]
  },
  "onKeyPressRight": {
    "prefix": "onKeyPressRight",
    "body": [
      "private function onKeyPressRight() as boolean",
      "\treturn false",
      "end function"
    ]
  },
  "onKeyPressReplay": {
    "prefix": "onKeyPressReplay",
    "body": [
      "private function onKeyPressReplay() as boolean",
      "\treturn false",
      "end function"
    ]
  },
  "onKeyPressRewind": {
    "prefix": "onKeyPressRewind",
    "body": [
      "private function onKeyPressRewind() as boolean",
      "\treturn false",
      "end function"
    ]
  },
  "onKeyPressFastForward": {
    "prefix": "onKeyPressFastForward",
    "body": [
      "private function onKeyPressFastForward() as boolean",
      "\treturn false",
      "end function"
    ]
  },
  "onKeyPressBack": {
    "prefix": "onKeyPressBack",
    "body": [
      "private function onKeyPressBack() as boolean",
      "\treturn false",
      "end function"
    ]
  },
  "onKeyPressOptions": {
    "prefix": "onKeyPressOptions",
    "body": [
      "private function onKeyPressOptions() as boolean",
      "\treturn false",
      "end function"
    ]
  },
  "onKeyPressOK": {
    "prefix": "onKeyPressOK",
    "body": [
      "private function onKeyPressOK() as boolean",
      "\treturn false",
      "end function"
    ]
  },
  "onKeyPressPlay": {
    "prefix": "onKeyPressPlay",
    "body": [
      "private function onKeyPressPlay() as boolean",
      "\treturn false",
      "end function"
    ]
  },

  //lifecycle
  "onGainedFocus": {
    "prefix": "onGainedFocus",
    "body": [
      "protected override function onGainedFocus(isSelfFocused as boolean)",
      "\tsuper.onGainedFocus(isSelfFocused)",
      "\tif isSelfFocused",
      "\t\t$0",
      "\tend if",
      "end function"
    ]
  },
  "onLostFocus": {
    "prefix": "onLostFocus",
    "body": [
      "protected override function onLostFocus()",
      "\tsuper.onLostFocus()",
      "\t$0",
      "end function"
    ]
  },
  "onshow": {
    "prefix": "onshow",
    "description": "",
    "body": [
      "protected override function onShow()",
      "\tsuper.onShow()",
      "  $0",
      "end function"
    ]
  },
  "onfirstshow": {
    "prefix": "onfirstshow",
    "description": "",
    "body": [
      "protected override function onFirstShow()",
      "\tsuper.onFirstShow()",
      "  $0",
      "end function"
    ]
  },
  "onhide": {
    "prefix": "onhide",
    "description": "",
    "body": [
      "protected override function onHide()",
      "\tsuper.onHide()",
      "  $0",
      "end function"
    ]
  },

  //diagnostics hints
  "bsdl": {
    "prefix": "bsdl",
    "description": "brighterscript disbale next line",
    "body": ["'bs:disable-next-line"]
  },
  "cspell-disable-line": {
    "prefix": "csdl",
    "description": "cspell disbale next line",
    "body": ["'// cspell:disable-next-line"]
  },
  "cspell-disable": {
    "prefix": "csd",
    "description": "cspell disbale",
    "body": ["'/* cspell:disable *\\"]
  },
  "cspell-enable": {
    "prefix": "cse",
    "description": "cspell enable",
    "body": ["'/* cspell:enable *\\"]
  },

  //type definitions
  "asinteger": {
    "prefix": "ai",
    "description": "as integer",
    "body": ["as integer"]
  },
  "asnode": {
    "prefix": "an",
    "description": "as node",
    "body": ["as mc.types.node"]
  },
  "asarray": {
    "prefix": "aa",
    "description": "as array",
    "body": ["as mc.types.array"]
  },
  "asassocarray": {
    "prefix": "aaa",
    "description": "as assocarray",
    "body": ["as mc.types.assocarray"]
  },
  "asfloat": {
    "prefix": "af",
    "description": "as float",
    "body": ["as float"]
  },
  "asobject": {
    "prefix": "ao",
    "description": "as object",
    "body": ["as object"]
  },
  "asboolean": {
    "prefix": "ab",
    "description": "as boolean",
    "body": ["as boolean"]
  },
  "asdynamic": {
    "prefix": "ad",
    "description": "as dynamic",
    "body": ["as dynamic"]
  },
  "asstring": {
    "prefix": "as",
    "description": "as string",
    "body": ["as string"]
  },

  //general
  "createsgnode": {
    "prefix": "createsgnode",
    "description": "",
    "body": [
      "m.$1 = m.createSGNode(\"$2\", ${3:m.top}, \"$1\", {",
      "\t$0",
      "})"
    ]
  },
  "cycleFocus": {
    "prefix": "cyclefocus",
    "description": "",
    "body": [
      "m.setFocus(m[mc.collections.getItemAtOffset(m.focusIds, m.${1:focusedControl.id}, ${2:-1})])",
      "\t$0"
    ]
  },
  "function": {
    "prefix": "function",
    "body": ["function ${1:name}(${2:args}) ${3:as}", "\t${0}", "end function"]
  },
  "observe node field": {
    "prefix": "observe",
    "body": [
      "${2:m}.observe(${3:objectAndField}, ${6:m.}${7| ,\\, \"value\",\\, \"both\",\\, \"node\"|})",
      "$0"
    ]
  },
  "unobserve node field": {
    "prefix": "unobserve",
    "body": ["${2:m}.unobserveNodeField(${3:objectAndField}, ${6:m.})", "$0"]
  },
  "createTask": {
    "prefix": "createtask",
    "body": [
      "${2:m.thing} = m.createTask(\"${4:name}\", ${5:args}, ${6:m.}${7| ,\\, true,\\, false|}${8| ,\\, \"value\",\\, \"both\",\\, \"node\"|})",
      "$0"
    ]
  },
  "getChildren": {
    "prefix": "getChildren",
    "body": ["$1.getChildren(-1, 0)$0"]
  },
  "logInfo": {
    "prefix": "loginfo",
    "body": ["m.log.info(\"$1\"$2)", "$0"]
  },
  "logWarn": {
    "prefix": "logwarn",
    "body": ["m.log.warn(\"$1\"$2)", "$0"]
  },
  "logError": {
    "prefix": "logerror",
    "body": ["m.log.error(\"$1\"$2)", "$0"]
  },
  "logVerbose": {
    "prefix": "logverbose",
    "body": ["m.log.verbose(\"$1\"$2)", "$0"]
  },

  //-----------------------------------------------------------------------------------------------
  //file templates
  //-----------------------------------------------------------------------------------------------
  "header": {
    "prefix": "header",
    "body": [
      "'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "'++ ${1:comment}",
      "'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "${0}"
    ]
  },

  //control
  "template_control": {
    "prefix": "templatecontrol",
    "description": "",
    "body": [
      "import \"pkg:/source/roku_modules/maestro/core/Utils.brs\"",
      "import \"pkg:/source/roku_modules/maestro/view/BaseView.brs\"",
      "",
      "namespace ${1:robot.controls}",
      "",
      "  @observersWaitInitialize",
      "  @node(\"${2}\", \"mv_BaseView\")",
      "  class ${2} extends mv.BaseView",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Public fields",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "$0",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Views",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ State",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Initialization",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    function new()",
      "      super(\"${2}\")",
      "    end function",
      "",
      "    protected override function initialize() as void",
      "      super.initialize()",
      "      m.createViews()",
      "    end function",
      "",
      "    private function createViews() as void",
      "    end function",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Public methods",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Overridden methods",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Callbacks",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Private methods",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Key presses",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Lifecycle",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "  end class",
      "end namespace"
    ]
  },

  //control tests
  "template_controltests": {
    "prefix": "templatecontroltests",
    "description": "",
    "body": [
      "import \"pkg:/source/tests/BaseTestSuite.spec.bs\"",
      "namespace tests",
      "  @suite(\"${1:name} tests\")",
      "  class ${1:name}Tests extends tests.BaseTestSuite",
      "",
      "    private control",
      "    protected override function beforeEach()",
      "      super.beforeEach()",
      "      nodeTop = new rooibos.utils.MockNode(\"top\")",
      "      m.control = m.createNodeClass(${2:namespace}${1:name}, true, nodeTop, m.global)",
      "    end function",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    @describe(\"initialize\")",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    @it(\"creates views\")",
      "    function _()",
      "      m.expectOnce(m.control, \"createViews\", [])",
      "      m.control.initialize()",
      "    end function",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    @describe(\"createViews\")",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    @it(\"creates views from bundle, and sets default control\")",
      "    function _()",
      "      bundle = {",
      "        \"id\": \"bundle\"",
      "        \"views\": [\"views\"]",
      "      }",
      "      m.control.styleManager = { \"id\": \"styleManager\" }",
      "",
      "      m.expectOnce(m.control.styleManager, \"callFunc\", [\"loadBundle\", \"pkg:/source/${3:bundlePath}/${1:name}.bundle\"], bundle)",
      "      m.control.createViews()",
      "",
      "      m.assertEqual(m.control.focusedControl, m.control.${4:focusedControl})",
      "    end function",
      "    $0",
      "  end class",
      "end namespace"
    ]
  },

  //screen
  "template_screen": {
    "prefix": "templatescreen",
    "description": "",
    "body": [
      "import \"pkg:/source/roku_modules/maestro/core/Utils.brs\"",
      "import \"pkg:/source/screens/BaseScreen.bs\"",
      "",
      "namespace ${1:robot.controls}",
      "",
      "  @observersWaitInitialize",
      "  @node(\"${2}\", \"mv_BaseScreen\")",
      "  class ${2} extends robot.lib.BaseScreen",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Public fields",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Views",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ State",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Initialization",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    function new()",
      "      super(\"${2}\")",
      "    end function",
      "",
      "    protected override function initialize() as void",
      "      super.initialize()",
      "      m.createViews()",
      "    end function",
      "",
      "    private function createViews() as void",
      "       bundle = m.styleManager@.loadBundle(\"pkg:/source/screens/${3:bundlePath}${2}.bundle\")",
      "       m.createViewsFromStyleJson(bundle.views, m.top)",
      "       m.focusedControl = m.${4:defaultControl}",
      "    end function",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Public methods",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Overridden methods",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Callbacks",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Private methods",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Key presses",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Lifecycle",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "  end class",
      "end namespace"
    ]
  },

  //screen tests
  "template_screentests": {
    "prefix": "templatescreentests",
    "description": "",
    "body": [
      "import \"pkg:/source/tests/BaseTestSuite.spec.bs\"",
      "namespace tests",
      "  @suite(\"${1:name} tests\")",
      "  class ${1:name}Tests extends tests.BaseTestSuite",
      "",
      "    private screen",
      "    protected override function beforeEach()",
      "      super.beforeEach()",
      "      nodeTop = new rooibos.utils.MockNode(\"top\")",
      "      m.screen = m.createNodeClass(${2:namespace}${1:name}, true, nodeTop, m.global)",
      "    end function",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    @describe(\"initialize\")",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    @it(\"creates views\")",
      "    function _()",
      "      m.expectOnce(m.screen, \"createViews\", [])",
      "      m.screen.initialize()",
      "    end function",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    @describe(\"createViews\")",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    @it(\"creates views from bundle, and sets default control\")",
      "    function _()",
      "      bundle = {",
      "        \"id\": \"bundle\"",
      "        \"views\": [\"views\"]",
      "      }",
      "      m.screen.styleManager = { \"id\": \"styleManager\" }",
      "",
      "      m.expectOnce(m.screen.styleManager, \"callFunc\", [\"loadBundle\", \"pkg:/source/screens/${3:bundlePath}/${1:name}.bundle\"], bundle)",
      "      m.screen.createViews()",
      "",
      "      m.assertEqual(m.screen.focusedControl, m.screen.${4:focusedControl})",
      "    end function",
      "  end class",
      "end namespace"
    ]
  },

  //task
  "template_task": {
    "prefix": "templatetask",
    "description": "",
    "body": [
      "import \"pkg:/source/models/Result.bs\"",
      "import \"pkg:/source/tasks/BaseTask.bs\"",
      "import \"pkg:/source/roku_modules/maestro/core/DebugTimer.brs\"",
      "import \"pkg:/source/api/PlatformMixin.bs\"",
      "import \"pkg:/source/lib/Utils.bs\"",
      "import \"pkg:/source/content-api/service/ContentApiParser.bs\"",
      "",
      "namespace ${1:robot.content.tasks}",
      "",
      "  @task(\"${2}\", \"Task\")",
      "  class ${2} extends robot.tasks.BaseTask",
      "",
      "    private api = robot.api.PlatformMixin.getCoreClient()",
      "    private parser = new robot.content.service.ContentApiParser()",
      "",
      "    function new()",
      "      super(\"${2}\")",
      "    end function",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ entry point",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    private function execute(args as mc.types.assocarray)",
      "      m.log.info(\"executing task with args\", args)",
      "",
      "      command = lcase(mc.getPath(args, \"command\", \"\"))",
      "",
      "      if command = \"exampleCommand\"",
      "        return m.exampleCommand(mc.getPath(args, \"id\"))",
      "      else",
      "        m.log.error(\"unknown command\")",
      "        return new robot.models.Result(false, invalid, \"Unknown command\")",
      "      end if",
      "    end function",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ commands",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    private function exampleCommand(id as string) as robot.models.Result",
      "      $0",
      "      return new robot.models.Result(false, invalid, \"not implemented\")",
      "    end function",
      "  end class",
      "end namespace"
    ]
  },
  "template_task_tests": {
    "prefix": "templatetasktests",
    "description": "",
    "body": [
      "import \"pkg:/source/tests/BaseTestSuite.spec.bs\"",
      "namespace tests",
      "  @suite(\"${1}Task tests\")",
      "  class ${1}TaskTests extends tests.BaseTestSuite",
      "",
      "    private task",
      "    private appConfig",
      "",
      "    protected override function beforeEach()",
      "      super.beforeEach()",
      "      m.appConfig = { \"environment\": { \"endpoints\": {",
      "            \"content\": \"ce\"",
      "            \"static\": \"se\"",
      "          }",
      "        }",
      "      }",
      "      mioc.setInstance(\"appConfig\", m.appConfig)",
      "",
      "      m.task = new robot.content.tasks.${1}Task()",
      "",
      "      'for easy debugging",
      "      m.task.itemStore = { id: \"itemStore\" }",
      "    end function",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    @describe(\"constructor\")",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    @it(\"ensures ioc dependencies are injected\")",
      "    function _()",
      "      m.assertClass(m.task.parser, \"robot.content.service.${1}Parser\")",
      "      m.assertClass(m.task.api, \"robot.api.PlatformClient\")",
      "    end function",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    @describe(\"execute\")",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    @it(\"handles unknown command\")",
      "    function _()",
      "      m.expectNone(m.task, \"exampleCommand\")",
      "      result = m.task.execute({",
      "        id: \"apiTask\"",
      "        command: \"unknown\"",
      "        serviceId: \"sid\"",
      "      })",
      "      m.assertEqual(result, new robot.models.Result(false, invalid, \"Unknown command\"))",
      "    end function",
      "",
      "    @it(\"executes example command\")",
      "    function _()",
      "      serviceResult = { \"id\": \"serviceResult\" }",
      "",
      "      m.expectOnce(m.task, \"loadFeatured\", [], serviceResult)",
      "      result = m.task.execute({",
      "        id: \"apiTask\"",
      "        command: \"exampleCommand\"",
      "      })",
      "      m.assertEqual(result, serviceResult)",
      "    end function",
      "  end class",
      "end namespace"
    ]
  },

  //class
  "template_class": {
    "prefix": "templateclass",
    "description": "",
    "body": [
      "import \"pkg:/source/lib/BaseClass.bs\"",
      "",
      "namespace $1",
      "  class $2 extends robot.lib.BaseClass",
      "",
      "    function new()",
      "      super(\"$2\")",
      "      $0",
      "    end function",
      "  end class",
      "end namespace",
      ""
    ]
  },
  //model
  "template_model": {
    "prefix": "templatemodel",
    "description": "",
    "body": [
      "import \"pkg:/source/models/Basemodel.bs\"",
      "",
      "namespace ${1:robot.content.models}",
      "  @node(\"$2\", \"${3:ContentNode}\")",
      "  class $2 extends ${4:robot.models.BaseModel}",
      "",
      "    public json as mc.types.assocarray",
      "",
      "    public function toString() as string",
      "      return \"<$2> (\" + m.top.id + \") - '\" + mc.getPath(m.json, \"title\", \"NO TITLE\") + \"'\"",
      "    end function",
      "  end class",
      "end namespace"
    ]
  },
  // view
  "new_maestro_view": {
    "prefix": "newview",
    "description": "",
    "body": [
      "import \"pkg:/source/roku_modules/maestro/core/Utils.brs\"",
      "import \"pkg:/source/lib/BaseView.bs\"",
      "",
      "namespace ${1:robot.controls}",
      "",
      "  @observersWaitInitialize",
      "  @node(\"${2}\", \"mv_BaseView\")",
      "  class ${2} extends robot.lib.BaseView",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Public fields",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Views",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ State",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Initialization",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    function new()",
      "      super(\"${2}\")",
      "    end function",
      "",
      "    protected override function initialize() as void",
      "      super.initialize()",
      "      m.createViews()",
      "    end function",
      "",
      "    private function createViews() as void",
      "       bundle = m.styleManager@.loadBundle(\"pkg:/source/${3}/${2}.bundle\")",
      "       m.createViewsFromStyleJson(bundle.views, m.top)",
      "    end function",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Public methods",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Overridden methods",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Callbacks",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Private methods",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Key presses",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "    '++ Lifecycle",
      "    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "  end class",
      "end namespace"
    ]
  },
  //list delegate

  "onItemSelected": {
    "prefix": "list_onItemSelected",
    "description": "",
    "body": [
      "private function onItemSelected(rowIndex as integer, itemIndex as integer, direction as integer)",
      "  $0",
      "end function"
    ]
  },

  "onRowDidGainFocus": {
    "prefix": "list_onRowDidGainFocus",
    "description": "",
    "body": [
      "private function onRowDidGainFocus(rowIndex as integer, direction as integer)",
      "  $0",
      "end function"
    ]
  },

  "onRowDidLoseFocus": {
    "prefix": "list_onRowDidLoseFocus",
    "description": "",
    "body": [
      "private function onRowDidLoseFocus(rowIndex as integer, direction as integer)",
      "  $0",
      "end function"
    ]
  },

  "onRowWillLoseFocus": {
    "prefix": "list_onRowWillLoseFocus",
    "description": "",
    "body": [
      "private function onRowWillLoseFocus(rowIndex as integer, direction as integer)",
      "  $0",
      "end function"
    ]
  },

  "onRowGainingFocus": {
    "prefix": "list_onRowGainingFocus",
    "description": "",
    "body": [
      "private function onRowGainingFocus(rowIndex as integer, direction as integer, fraction as float)",
      "  $0",
      "end function"
    ]
  },

  "onRowLosingFocus": {
    "prefix": "list_onRowLosingFocus",
    "description": "",
    "body": [
      "private function onRowLosingFocus(rowIndex as integer, direction as integer, fraction as float)",
      "  $0",
      "end function"
    ]
  },

  "onCellDidGainFocus": {
    "prefix": "list_onCellDidGainFocus",
    "description": "",
    "body": [
      "private function onCellDidGainFocus(rowIndex as integer, itemIndex as integer, direction as integer)",
      "  $0",
      "end function"
    ]
  },

  "onCellWillLoseFocus": {
    "prefix": "list_onCellWillLoseFocus",
    "description": "",
    "body": [
      "private function onCellWillLoseFocus(rowIndex as integer, itemIndex as integer, direction as integer)",
      "  $0",
      "end function"
    ]
  },

  "onCellGainingFocus": {
    "prefix": "list_onCellGainingFocus",
    "description": "",
    "body": [
      "private function onCellGainingFocus(rowIndex as integer, itemIndex as integer, direction as integer, fraction as float)",
      "  $0",
      "end function"
    ]
  },

  "onCellLosingFocus": {
    "prefix": "list_onCellLosingFocus",
    "description": "",
    "body": [
      "private function onCellLosingFocus(rowIndex as integer, itemIndex as integer, direction as integer, fraction as float)",
      "  $0",
      "end function"
    ]
  },

  "onRowData": {
    "prefix": "list_onRowData",
    "description": "",
    "body": [
      "private function onRowData(rowIndex as integer, data as dynamic)",
      "  $0",
      "end function"
    ]
  },

  //cell delegate

  "onDidGainFocus": {
    "prefix": "cell_onDidGainFocus",
    "description": "",
    "body": [
      "private function onDidGainFocus(direction as integer)",
      "  $0",
      "end function"
    ]
  },

  "onDidLoseFocus": {
    "prefix": "cell_onDidLoseFocus",
    "description": "",
    "body": [
      "private function onDidLoseFocus(direction as integer)",
      "  $0",
      "end function"
    ]
  },

  "onWillLoseFocus": {
    "prefix": "cell_onWillLoseFocus",
    "description": "",
    "body": [
      "private function onWillLoseFocus(direction as integer)",
      "  $0",
      "end function"
    ]
  },

  "onGainingFocus": {
    "prefix": "cell_onGainingFocus",
    "description": "",
    "body": [
      "private function onGainingFocus(direction as integer, fraction as float)",
      "  $0",
      "end function"
    ]
  },

  "onLosingFocus": {
    "prefix": "cell_onLosingFocus",
    "description": "",
    "body": [
      "private function onLosingFocus(direction as integer, fraction as float)",
      "  $0",
      "end function"
    ]
  }
}
