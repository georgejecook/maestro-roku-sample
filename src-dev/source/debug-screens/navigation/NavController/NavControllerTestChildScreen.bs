import "pkg:/source/roku_modules/maestro/view/BaseScreen.brs"
import "pkg:/source/roku_modules/maestro/core/Utils.brs"
import "pkg:/source/roku_modules/maestro/core/Notification.brs"

@node("NavControllerTestChildScreen", "mv_BaseScreen")
class NavControllerTestChildScreen extends mv.BaseScreen

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Fields
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private bgRect as mc.types.node
  private label as mc.types.node

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Initialization
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function new()
    super("NavControllerTestChildScreen ")
  end function

  protected override function initialize()
    m.log.info("Initialized NavControllerTestChildScreen ")
    super.initialize()
    m.createViews()
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function createViews()
    m.bgRect = m.createSGNode("mv_Rectangle", m.top, "bgRect", {
      size: [1000, 400]
      color: "#b4b4b4"
    })
    m.label = m.createSGNode("mv_Label", m.bgRect, "label", {
      font: "font:mediumBoldSystemFont"
      color: "#000000"
      translation: [100, 100]
      text: `${m.top.id}`
    })
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Presses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onKeyPressOK() as boolean
    m.log.info("NavControllerTestChildScreen - on KEY PRESS OK")
    return true
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Life cycles
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onFirstShow()
    m.log.info("On first show", m.top.id)
    pushedView = m.top.navController.pushedView
    poppedView = m.top.navController.poppedView

    m.log.info("Pushed view", mc.dv(pushedView))
    m.log.info("Popped view", mc.dv(poppedView))

    super.onFirstShow()
  end function

  protected override function onShow()
    super.onShow()
    pushedView = m.top.navController.pushedView
    poppedView = m.top.navController.poppedView

    m.log.info("On show", m.top.id, "pushed", mc.dv(pushedView), "popped", mc.dv(poppedView))
  end function

  protected override function onHide()
    super.onHide()
    m.log.info("On hide", m.top.id, mc.dv(m.top.navController))
    if m.top.navController <> invalid
      pushedView = m.top.navController.pushedView
      poppedView = m.top.navController.poppedView
      m.log.info("pushed", mc.dv(pushedView), "popped", mc.dv(poppedView))
    end if
  end function

  protected override function onAddedToAggregateView(view as mc.types.node)
    m.log.info("Added to aggregated view", m.top.id)
    super.onAddedToAggregateView(view)
  end function

  protected override function onRemovedFromAggregateView(view as mc.types.node)
    m.log.info("Remove from aggregated view", m.top.id)
    super.onRemovedFromAggregateView(view)
  end function

end class
