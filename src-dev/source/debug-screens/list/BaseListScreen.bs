import "pkg:/source/roku_modules/maestro/view/BaseScreen.brs"
import "pkg:/source/roku_modules/maestro/core/Utils.brs"
import "pkg:/source/roku_modules/maestro/core/DebugTimer.brs"
import "pkg:/source/roku_modules/maestro/ml/ListMixin.brs"


@node("SuperFastScrollScreen", "mv_BaseScreen")
class SuperFastScrollScreen extends mv.BaseScreen

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Views
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private list as mc.types.node

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Fields
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public componentPool as mc.types.node
  private contentId = 0
  private rowSettings
  private focusSettings
  private cellSettings
  private loadingIndicator
  private scrollSpeed = 0.1
  private numberOfRows = 20
  private defaultCellType = "ml_SimpleCell"

  private firstItem = invalid
  private dataIndex = 0
  private selectedRow as mc.types.node
  private selectedevent as ml.ListEvent
  private selectedItemIndex as integer
  private selectedItem as mc.types.node

  private rows = []
  private label as mc.types.node
  private updateInfoTimeout as mc.types.node


  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Initialization
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function new()
    super("SuperFastScrollScreen")
  end function

  protected override function initialize()
    super.initialize()
    bundle = m.styleManager@.loadBundle("pkg:/source/debug-screens/list/BaseListScreen.json")
    m.createViewsFromStyleJson(bundle.views)
    m.label = m.createSGNode("mv_Label", m.top, "label", {
      translation: [500, 0]
      size: [1000, 50]
      fontKey: "mediumbold,30"
      color: "#ffffff"
    })
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ List Data - Initialization
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function resetData()
    m.cellSettings = ml.listMixin.createCellSettings("SimpleCell", [307, 100], 30)
    m.makeListData()
    m.reload()
  end function

  private function makeListData()
    m.list.content = invalid

    timer = new mc.utils.DebugTimer("list")

    m.rowSettings = ml.listMixin.createRowSettings(m.cellSettings, invalid, 30)

    m.focusSettings = ml.listMixin.createFocusSettings("fixed", [-50, -50, 50, 50])
    listSettings = ml.listMixin.createListSettings()
    listSettings.rowCreationStrategy = "async"
    listSettings.rowCreationBatchSize = 5
    listSettings.rowCreationBatchDelay = 0.3
    listSettings.renderStrategy = "dynamic"
    listSettings.numberItemsToRenderAfter = 2
    listSettings.numberItemsToRenderBefore = 1


    content = ml.listMixin.createListContent(m.focusSettings, m.rowSettings, listSettings)
    content@.appendChild(m.createHeaderOnlyData())
    m.liveRow = m.createRow("live", 20)
    m.upcomingRow = m.createRow("upcoming", 20)
    content@.appendChild(m.liveRow)
    m.removeNonHeaderRows(true)
    m.isLoading = not m.isLoading

    m.rows = [
      m.liveRow
      m.upcomingRow
      m.createRow("complete", 20)
      m.addRow()
      m.createRow("complete", 20)
      m.addRow()
      m.createRow("complete", 20)
      m.addRow()
      m.createRow("complete", 20)
      m.addRow()
      m.createRow("complete", 20)
      m.addRow()
      m.createRow("complete", 20)
      m.addRow()
      m.createRow("complete", 20)
      m.addRow()
      m.createRow("complete", 20)
      m.addRow()
      m.createRow("complete", 20)
      m.addRow()
      m.createRow("complete", 20)
      m.addRow()
      m.createRow("complete", 20)
      m.addRow()
      m.createRow("complete", 20)
      m.addRow()
    ]

    m.list.content@.appendChildren(m.rows, 1)

    content@.appendChild(m.upcomingRow)
    timer.log("makeData")
    m.setFocus(m.loadingIndicator)

    m.list.content = content

    timer.log("set content")
    if m.list.state = sample.list.ViewState.rendered
      m.onListRenderState(sample.list.ViewState.rendered)
      m.loadingIndicator.isActive = false
    else
      m.observeNodeField(m.list, "state", m.onListRenderState, "value", true)
    end if
  end function


  protected function addRow()
    rowFocusSettings = ml.listMixin.createFocusSettings("fixed", [0, 0, 0, 0])
    row = createObject("roSGNode", "ml_RowContent")
    rowFocusSettings.feedbackColor = "#F4D42A"
    headerSettings = ml.listMixin.createHeaderSettings([30, 20], 80, "mediumBold,50", "#ffff00")
    cellSettings = ml.listMixin.createCellSettings("PosterCellEfficient", [400, 250], 100)
    row.settings = ml.listMixin.createRowSettings(cellSettings, rowFocusSettings, 30, headerSettings)
    row.settings.contentOffset = [100, 0]

    row.title = "NEW ROW " + m.contentId.toStr()
    row.id = rnd(2147483647).toStr()
    m.contentId++
    row@.appendChildren(m.makeItems(m.defaultCellType, 20))
    return row
  end function


  private liveRow as mc.types.node
  private upcomingRow as mc.types.node

  protected function onListRenderState(state as string)
    m.log.info("onListRenderState", state)
    if state = "rendered"
      m.setFocus(m.list)
      m.list@.moveToRowItemIndex(0, 0)
      m.loadingIndicator.isActive = false
    end if
  end function

  private function createHeaderOnlyData()
    row = createObject("roSGNode", "ml_RowContent")
    row.id = rnd(2147483647).toStr()
    row.settings = ml.listMixin.createCustomRowSettings("ComplexRowEfficient", 300)
    return row
  end function


  protected function createRow(title as string, numItems as integer)
    numCols = 4
    row = createObject("roSGNode", "ml_RowContent")
    row.id = rnd(2147483647).toStr()

    m.log.info("is using grids")
    gridFocusSettings = ml.listMixin.createFocusSettings("floating", [0, 0, 0, 0])
    row.settings = ml.listMixin.createGridRowSettings(m.cellSettings, gridFocusSettings, 30, invalid, 70, numCols, 100, 5, 50)
    row.firstRowScreenPos = 70
    row.otherRowScreenPos = 70

    row.settings.contentOffset = [100, 30]
    row.title = title
    row@.appendChildren(m.makeItems(m.defaultCellType, numItems, ""))
    return row
  end function

  protected function addItems(cellType as string, number as integer)
    row = m.list.content@.getChild(m.list.focusedRowIndex)
    row@.appendChildren(m.makeItems(cellType, number))
  end function

  protected function makeItems(cellType as string, number as integer, prefix = "Item" as string)
    items = []
    for i = 0 to number - 1
      items.push(m.makeItem(cellType, `${prefix} ${m.contentId} [${i}]`))
    end for
    return items
  end function

  protected function makeItem(cellType as string, title as string) as mc.types.node
    id = str(m.contentId).trim()
    child = m.createSGNode("Item", invalid, id, {
      title: title
      json: {
        title: title
        description: "some really long " + id + "text in here " + id
        posterUrl: "https://picsum.photos/id/" + str(m.contentId mod 1000).trim() + "/340/340"
      }
      HDGRIDPOSTERURL: "https://picsum.photos/id/" + str(m.contentId mod 1000).trim() + "/340/340"
    })
    m.contentId++
    return child
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function reload() as void
    ' m.removeNonHeaderRows(false)
    ' m.rows = [
    '   m.createRow("live", 20)
    '   m.createRow("upcoming", 20)
    '   m.createRow("complete", 20)
    ' ]


    ' m.list.content@.insertChildren(m.rows, 1)
    m.list.content@.notifyUpdate()
  end function


  private function removeNonHeaderRows(update = true as boolean)
    header = m.list.content@.getChild(0)
    m.list.content@.setNotificationsEnabled(false)
    m.list.content@.clear()
    m.list.content@.appendChild(header)

    if update
      m.list.content@.notifyUpdate()
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ List Delegate
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onItemSelected(event as ml.ListEvent)
    m.selectedRow = m.rows[event.rowIndex]
    m.selectedItem = m.selectedRow.getChild(event.cellIndex)
    m.selectedItemIndex = event.cellIndex
    m.log.info("selected item ", mc.dv(m.selectedItem), "from row", mc.dv(m.selectedRow))
  end function

  private function onRowDidGainFocus(event as ml.ListEvent)
    if event.direction = -1
    end if
  end function

  private function onRowDidLoseFocus(event as ml.ListEvent)
    if event.direction = 1
    end if
  end function

  private function onRowWillLoseFocus(event as ml.ListEvent)
  end function

  private function onRowGainingFocus(event as ml.ListEvent)
    if event.direction = -1
    end if
  end function

  private function onRowLosingFocus(event as ml.ListEvent)
    if event.direction = 1
    end if
  end function

  private function onRowData(event as ml.ListEvent)
    if event.data.action = "add"
      ' ? " add row"
      m.liveRow@.appendChildren(m.makeItems(m.defaultCellType, 1, ""))
    else
      ' ? " remove row"
      m.liveRow@.removeChildIndex(0)
    end if

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Presses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function isCapturingAnyKeyPress(key as string, press as boolean) as boolean
    return key <> "back"
  end function

  private isRemoved = false
  private isLoading = false
  private isAtEnd = false

  private function onKeyPressPlay() as boolean
    isAtEnd = not isAtEnd
    m.list@.moveToRow(isAtEnd ? 0 : m.list.content.count() - 1, true)
    return true
  end function

  private function onKeyPressFastForward() as boolean
    m.log.info("moving item focus +1 to:", m.list.focusedCellIndex + 1)
    m.list@.moveToRowItemIndex(m.list.focusedRowIndex, m.list.focusedCellIndex + 1, true)
    return true
  end function

  private function onKeyPressRewind() as boolean
    m.log.info("moving item focus -1 to:")
    m.list@.moveToRowItemIndex(m.list.focusedRowIndex, m.list.focusedCellIndex - 1, true)
    return true
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Lifecycle
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onShow()
    super.onShow()
    m.list.isHidden = false
    m.setFocus(m.list)
    m.updateInfoTimeout = m.setInterval(function()
      pool = m.global.componentPool
      m.label.text = `cells created: ${pool.numberOfComponents} in use: ${pool.numberOfComponentsInUse}`
    end function, 1)
  end function

  protected override function onHide()
    super.onHide()
    m.list.isHidden = true
    m.cancelInterval(m.updateInfoTimeout)
    m.list.isHidden = true
  end function

  protected override function onGainedFocus(isSelfFocused as boolean)
    super.onGainedFocus(isSelfFocused)
    m.log.info("onGainedFocus", isSelfFocused)

    if isSelfFocused
      m.setFocus(m.list)
    end if
  end function

end class
