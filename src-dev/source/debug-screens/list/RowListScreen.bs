import "pkg:/source/roku_modules/maestro/view/BaseScreen.brs"
import "pkg:/source/roku_modules/maestro/ml/ListMixin.brs"

@node("RowListScreen", "mv_BaseScreen")
class RowListScreen extends mv.BaseScreen

  'views
  private list
  private listHolder
  private bgRect

  'style
  private numberOfRows = 50
  private defaultCellType = "RowListCell"

  'state
  private contentId = 0
  private rowSettings
  private focusSettings
  private cellSettings

  private isSmall = false

  private button as mc.types.node

  function new()
    super("RowListScreen")
    m.log.info("RowListScreen new")
    translation = [0, 0]
    size = [1920, 1080]

    m.bgRect = m.createSGNode("mv_Rectangle", m.top, "bgRect", {
      translation: translation
      size: size
      color: "#b286f0"
    })
    m.listHolder = m.createSGNode("Group", m.top, "listHolder")

    m.list = m.createSGNode("mv_RowList", m.listHolder, "list", {
      translation: translation
      itemSize: [1920, 300]
      itemComponentName: "RowListCell"
      rowItemSize: [480, 320]
      numRows: 3
    })
    m.button = m.createSGNode("mv_Button", m.top, "button", {
      text: "create list"
      autosize: true
    })

    m.observe(m.button.selected, m.onResetChange, "none")

    m.content = m.createSGNode("ContentNode", invalid, "content")
    m.content.appendChildren(m.createRows())
    m.button.text = `create list with ${m.contentId} items`
  end function


  private content as mc.types.node

  private function onResetChange()
    m.list.content = m.content
    m.setFocus(m.list)
  end function

  private function createRows()
    rows = []
    for i = 0 to m.numberOfRows - 1
      row = m.createSGNode("ContentNode", invalid, `row_${i}`)
      row.title = "ROW " + str(i)
      row.appendChildren(m.makeItems(m.defaultCellType, 20))
      rows.push(row)
    end for
    return rows
  end function

  private function makeItems(cellType as string, number as integer)
    d = createObject("roDateTime")
    nonce = str(d.asSeconds()).trim()
    items = []
    for i = 0 to number
      id = rnd(2147483647).toStr()
      child = m.createSGNode("Item", invalid, id, {
        json: {
          title: `Item ${id}`
          description: "some really long " + id + "text in here " + id
          posterUrl: "https://picsum.photos/id/" + str(m.contentId mod 1000).trim() + "/340/340"
        }
      })

      child.description = "some really long " + id + "text in here " + id
      child.HDGRIDPOSTERURL = "https://picsum.photos/id/" + str(m.contentId mod 1000).trim() + "/340/340"
      child.title = `Item ${id}`

      ' if m.contentId mod 5 = 0
      '   cellType = "SimpleCell"
      ' else if m.contentId mod 7 = 0
      '   cellType = "ComplexCell"
      ' end if

      ' child.addFields({
      '   "cellType": cellType
      ' })
      items.push(child)
      m.contentId++
    end for
    return items
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ keypresses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onKeyPressOption() as boolean
    return true
  end function

  private function onKeyPressFastForward() as boolean
    return true
  end function

  protected override function onKeyPressBack() as boolean
    if m.top.isRoot <> true
      m.list.isHidden = true
      m.pop()
    end if
    return true
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ lifecycle
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onShow()
    super.onShow()
  end function

  protected override function onHide()
    super.onHide()
  end function

  protected override function onGainedFocus(isSelfFocused as boolean)
    super.onGainedFocus(isSelfFocused)
    m.log.info("onGainedFocus", isSelfFocused)

    if isSelfFocused
      m.setFocus(m.button)
    end if
  end function

end class
