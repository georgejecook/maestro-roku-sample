import "pkg:/source/roku_modules/maestro/view/BaseScreen.brs"
import "pkg:/source/roku_modules/maestro/core/Utils.brs"
import "pkg:/source/roku_modules/maestro/ml/ListMixin.brs"
import "pkg:/source/roku_modules/maestro/core/DebugTimer.brs"
import "pkg:/source/roku_modules/maestro/ml/CommonListApi.brs"

@node("UpdateListDataScreen", "mv_BaseScreen")
class UpdateListDataScreen extends mv.BaseScreen

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Views
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private list as mc.types.node
  private menu as mc.types.node

  'buttons
  private resetButton as mc.types.node
  private reloadTodayButton as mc.types.node
  private moveItemUpButton as mc.types.node
  private dayBackButton as mc.types.node
  private dayForwardButton as mc.types.node
  private moveItemDownButton as mc.types.node
  private useGridButton as mc.types.node

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Fields
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public componentPool as mc.types.node
  private contentId = 0
  private rowSettings
  private focusSettings
  private cellSettings
  private scrollSpeed = 2
  private numberOfRows = 20
  private defaultCellType = "ml_SimpleCell"

  private firstItem = invalid
  private dataIndex = 0
  private isUsingGrids = true

  private dayIndex = 0
  private dayModules = []

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Initialization
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function new()
    super("UpdateListDataScreen")
  end function

  protected override function initialize()
    super.initialize()
    bundle = m.styleManager@.loadBundle("pkg:/source/debug-screens/list/UpdateListDataScreen.json")
    m.createViewsFromStyleJson(bundle.views)
    ' m.list.delegate = m.top
    m.resetData()
    m.list.delegate = m.top
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Callbacks
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onMenuItemChange(index as integer)
    m.log.info("selected tab item", index)
    button = m.menu@.getSelectedButton()
    if button.isSameNode(m.resetButton)
      m.log.info("resetting")
      m.resetData()
    else if button.isSameNode(m.reloadTodayButton)
      m.log.info("updating modules")
      m.reload()
    else if button.isSameNode(m.moveItemUpButton)
      m.log.info("moving an item up")
      m.removeNonHeaderRows(true)
    else if button.isSameNode(m.moveItemDownButton)
      m.log.info("moving an item down")
      m.moveDay(0)
    else if button.isSameNode(m.useGridButton)
      m.isUsingGrids = not m.isUsingGrids
      m.log.info("changing to useGrids", m.isUsingGrids)
      m.resetData()
    end if
    button.isSelected = false
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ updates
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private updateCount = 0
  private function reload()
    m.log.info("loading data again for dayIndex", m.dayIndex)
    item = m.list.content@.getChild(1)@.getChild(0)
    if item <> invalid
      m.updateCount++
      json = item.json
      json.title = `U: ${m.updateCount}`
      item.json = json
      item.version++
    end if
    m.changeLoadedDay(m.dayIndex)
  end function
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ List Data - Initialization
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function resetData()
    m.log.info("resetting data", m.isUsingGrids)
    m.cellSettings = ml.listMixin.createCellSettings("SimpleCell", [307, 100], 30)
    m.makeDayModules()
    m.makeListData()
    m.changeLoadedDay(0)
    m.updateStatus()
  end function

  private function makeListData()
    m.log.info("make list data")

    m.list@.setContent(invalid)

    timer = new mc.utils.DebugTimer("list")

    m.rowSettings = ml.listMixin.createRowSettings(m.cellSettings, invalid, 30)

    m.focusSettings = ml.listMixin.createFocusSettings("fixed", [-50, -50, 50, 50])
    listSettings = ml.listMixin.createListSettings()
    listSettings.rowCreationStrategy = "async"
    listSettings.rowCreationBatchSize = 5
    listSettings.rowCreationBatchDelay = 0.3
    listSettings.renderStrategy = "all"
    ' listSettings.renderStrategy = "all"

    content = ml.listMixin.createListContent(m.focusSettings, m.rowSettings, listSettings)
    timer.log("makeData")

    content@.appendChildren([m.makeHeader()])
    content@.setNotificationsEnabled(false)
    m.list@.setContent(content)

    timer.log("set content")
    if m.list.state = sample.list.ViewState.rendered
      m.onListRenderState("rendered")
    else
      m.observeNodeField(m.list, "state", m.onListRenderState, "value", true)
    end if
  end function

  private function makeHeader()
    m.log.info("make header")

    row = createObject("roSGNode", "ml_RowContent")
    row.id = rnd(2147483647).toStr()
    row.settings = ml.listMixin.createCustomRowSettings("DateHeaderRow", 310)
    row.settings.headerSettings.position = "none"
    return row
  end function

  private function makeVideoRow()
    m.log.info("make video row")

    row = createObject("roSGNode", "ml_RowContent")
    row.id = rnd(2147483647).toStr()
    row.settings = ml.listMixin.createCustomRowSettings("VideoRow", 500)
    row.settings.headerSettings.position = "none"
    return row
  end function

  private function onListRenderState(state as string)
    m.log.info("list render state", state)

    m.log.info("onListRenderState", state)
    if state = "rendered"
      m.setFocus(m.list)
    end if
  end function

  private function makeDayModules()
    m.log.info("make day modules")
    m.dayModules = []

    for i = 0 to 3
      m.dayModules.push({
        live: m.createModule("live", 5)
        upcoming: m.createModule("upcoming", 5)
        complete: m.createModule("complete", 5)
        other: m.createModule("other", 5)
        other2: m.createModule("other2", 5)
      })
    end for
  end function

  private function createModule(title as string, numItems as integer)
    numCols = 4
    prefix = m.isUsingGrids ? "G " : "H "

    row = createObject("roSGNode", "ml_RowContent")
    row.id = rnd(2147483647).toStr()

    if m.isUsingGrids
      m.log.info("is using grids")
      gridFocusSettings = ml.listMixin.createFocusSettings("floating", [0, 0, 0, 0])
      row.settings = ml.listMixin.createGridRowSettings(m.cellSettings, gridFocusSettings, 30, invalid, 310, numCols, 100, 5, 50)
    else
      m.log.info("is using rows")
      rowFocusSettings = ml.listMixin.createFocusSettings("fixed", [0, 0, 0, 0])
      row.settings = ml.listMixin.createRowSettings(m.cellSettings, rowFocusSettings, 30, invalid, 340)
    end if

    row.settings.contentOffset = [100, 30]
    numItems = rnd(5) + (m.isUsingGrids ? 6 : 0)
    row.title = title
    row@.appendChildren(m.makeItems(m.defaultCellType, numItems, prefix))
    row@.setNotificationsEnabled(false)
    return row
  end function

  private function makeItems(cellType as string, number as integer, prefix = "Item" as string)
    items = []
    if rnd(10) > 6
      for i = 0 to rnd(number - 1)
        items.push(m.makeItem(cellType, `${prefix} ${m.contentId} [${i}]`))
      end for
    end if
    return items
  end function

  private function makeItem(cellType as string, title as string) as mc.types.node
    id = str(m.contentId).trim()
    child = m.createSGNode("Item", invalid, id, {
      json: {
        title: title
        description: "some really long " + id + "text in here " + id
        posterUrl: "https://picsum.photos/id/" + str(m.contentId mod 1000).trim() + "/340/340"
      }
    })
    m.contentId++
    return child
  end function

  private function makeSomeCoolRows()
    m.log.info("make some cool rows")
    modules = []
    'ensure that row offsets are applied correctly
    for i = 0 to 5
      modules.push(m.createModule(`more ${i}`, 5))
    end for
    modules.push(m.makeVideoRow())
    'ensure that row offsets are applied correctly
    for i = 5 to 10
      modules.push(m.createModule(`more ${i}`, 5))
    end for

    m.list.content@.appendChildren(modules)
    m.list.content@.notifyUpdate()
    m.list@.synchronizeContent()

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function moveDay(offset as integer)
    m.dayIndex = mc.clamp(m.dayIndex + offset, 0, m.dayModules.count() - 1, true)
    m.changeLoadedDay(m.dayIndex)
    m.updateStatus()
  end function

  private function updateStatus()
    m.reloadTodayButton.text = `reload day ${m.dayIndex}`
    m.useGridButton.text = `Use: ${m.isUsingGrids ? "grids" : "rows"}`
  end function

  private function changeLoadedDay(dayIndex as integer)
    m.removeNonHeaderRows(false)
    newModules = []
    modules = []
    numModules = 0
    dayData = m.dayModules[m.dayIndex]
    for each moduleType in ["live", "upcoming", "complete"]
      if dayData[moduleType].count() > 0
        modules.push(dayData[moduleType])
      end if
    end for

    'ensure that row offsets are applied correctly
    for each module in modules
      if module.length > 0
        if numModules > 0 and module.settings.subType() = "ml_GridRowSettings"
          settings = module.settings.clone(true)
          module.settings = settings
        end if
        newModules.push(module)
        numModules++
      end if
    end for

    m.list.content@.insertChildren(newModules, 1)
    m.list@.synchronizeContent()
  end function

  private function removeNonHeaderRows(update = true as boolean) as void
    if m.list.content = invalid
      return
    end if
    header = m.list.content@.getChild(0)
    m.list.content@.clear()
    m.list.content@.appendChild(header)

    if update
      m.list@.synchronizeContent()
    end if
  end function

  private function setRowOpacity(rowIndex as integer, opacity as float, direction as integer, applyToAll = false as boolean)
    ' row = m.list@.getRowRenderer(rowIndex)
    ' if rowIndex = 0
    '   row.opacity = 1
    ' else if row.subType() <> "ml_GridRow"
    '   row.opacity = opacity
    ' else
    '   if applyToAll
    '     startIndex = 0
    '     endIndex = row.content.length - 1
    '   else
    '     'TODO(gcook): maestro-list will have delegate callbacks for subRowIndex changes in future, so this kind of calculation won't be required
    '     startIndex = mc.clamp((m.list.focusedSubRowIndex - (direction = -1 ? 1 : 0)) * 4, 0, row.content.length - 1)
    '     endIndex = mc.clamp(startIndex + 3, 0, row.content.length - 1)
    '   end if
    '   for i = startIndex to endIndex
    '     cell = m.list@.getCellRenderer(rowIndex, i)
    '     if cell <> invalid
    '       cell.opacity = opacity
    '     end if
    '   end for
    ' end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ List Delegate
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onItemSelected(event as ml.ListEvent)
    ? ">>>onItemSelected" ; event.rowIndex ; "," ; event.itemIndex
  end function

  private function onRowData(event as ml.ListEvent)
    if event.rowIndex = 0
      offset = mc.getInteger(event.data, "offset")
      m.log.info(`moving day by ${offset}`)
      m.moveDay(offset)
    end if
  end function

  private function onRowDidGainFocus(event as ml.ListEvent)
    if event.direction = -1
      m.setRowOpacity(event.rowIndex, 1, event.direction)
    end if
  end function

  private function onRowDidLoseFocus(event as ml.ListEvent)
    if event.direction = 1
      m.setRowOpacity(event.rowIndex, 0, event.direction)
    end if
  end function

  private function onRowWillLoseFocus(event as ml.ListEvent)
  end function

  private function onRowGainingFocus(event as ml.ListEvent)
    if event.direction = -1
      m.setRowOpacity(event.rowIndex, event.fraction, event.direction)
    end if
  end function

  private function onRowLosingFocus(event as ml.ListEvent)
    if event.direction = 1
      m.setRowOpacity(event.rowIndex, 1 - event.fraction, event.direction)
    end if
  end function

  private function toggleListUpdates(enabled as boolean)
    m.log.info("Setting list updates to ", enabled)
    m.list@.setUpdatesEnabled(enabled)
  end function

  private function changeContent()
    row = m.list@.getRow(1)
    child = m.makeItem(m.defaultCellType, "New item")
    row@.insertChild(child, 0)

    child = m.makeItem(m.defaultCellType, "Second New item")
    row@.insertChild(child, 1)

    row = m.list@.getRow(3)
    row@.removeChildrenIndex(row.length - 1, 0)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Presses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function isCapturingAnyKeyPress(key as string, press as boolean) as boolean
    return key <> "back"
  end function

  protected override function onKeyPressBack() as boolean
    if m.top.isRoot <> true
      m.list.isHidden = true
      m.dismiss("success")
    end if
    return true
  end function

  private function onKeyPressUp() as boolean
    m.setFocus(m.menu)
    return true
  end function

  private function onKeyPressDown() as boolean
    m.setFocus(m.list)
    return true
  end function

  private function onKeyPressOptions() as boolean
    m.log.info("onKeyPressOptions")
    m.makeSomeCoolRows()
    return true
  end function

  private function onKeyPressRewind() as boolean
    m.toggleListUpdates(false)
    m.changeContent()
    return true
  end function

  private function onKeyPressFastForward() as boolean
    m.toggleListUpdates(true)
    return true
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Lifecycle
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onShow()
    super.onShow()
    m.list.isHidden = false
    m.setFocus(m.list)
  end function

  protected override function onHide()
    super.onHide()
    m.list.isHidden = true
  end function

  protected override function onGainedFocus(isSelfFocused as boolean)
    super.onGainedFocus(isSelfFocused)
    m.log.info("onGainedFocus", isSelfFocused)

    if isSelfFocused
      m.setFocus(m.list)
    end if
  end function

end class
