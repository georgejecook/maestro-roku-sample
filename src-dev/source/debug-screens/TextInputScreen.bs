import "pkg:/source/roku_modules/maestro/view/BaseScreen.brs"
import "pkg:/source/roku_modules/maestro/core/Utils.brs"
import "pkg:/source/roku_modules/maestro/ml/ListMixin.brs"

import "pkg:/source/roku_modules/maestro/view/controls/Styles.brs"
import "pkg:/source/roku_modules/maestro/view/controls/ValidationUtils.brs"
import "pkg:/source/roku_modules/maestro/core/Utils.brs"
import "pkg:/source/roku_modules/maestro/view/KeyboardDialogUtils.brs"

@node("TextInputScreen", "mv_BaseScreen")
class TextInputScreen extends mv.BaseScreen
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Views
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private controlsGroup as mc.types.node
  private textInput1 as mc.types.node
  private textInput2 as mc.types.node
  private textInput3 as mc.types.node
  private dialog
  private selectedTextInput
  private inputValidator

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Fields
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function new()
    super("TextInputScreen")
  end function

  protected override function initialize()
    super.initialize()

    bundle = m.styleManager@.loadBundle("pkg:/source/debug-screens/TextInputScreen.bundle")
    m.styleManager@.addStyle("textInputScreen", bundle.styles)
    m.createViewsFromStyleJson(bundle.views)
    item = {
      json: {
        text: "Regular"
        hintText: "hint for input"
        subText: "sub text"
        errorText: "this is the error"
      }
    }
    m.inputValidator = mv.controls.InputValidator()
    m.applyDataMapToControls(item)
    m.dialog = new mv.KeyboardDialogUtil(m)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onButtonIndexChange(index as integer)
    m.log.info("selected text input", index)
    m.selectedTextInput = m.controlsGroup.getChild(index)
    m.dialog.showKeyboardDialog(m.selectedTextInput.text, "", m.updateTextInput, false, ["Continue", "Clear", "Back"])
  end function

  private function updateTextInput(text as string)
    m.log.info("update text input -", m.selectedTextInput.id)
    validationData = m.inputValidator.validate(m.selectedTextInput.validatorType, text)

    m.selectedTextInput.errorText = validationData.errorMessage
    m.selectedTextInput.hasError = validationData.hasError
    m.selectedTextInput.text = text
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Presses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function isCapturingAnyKeyPress(key as string, press as boolean) as boolean
    return key <> "back" and key <> "up"
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Lifecycle
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onGainedFocus(isSelfFocused as boolean)
    super.onGainedFocus(isSelfFocused)

    if isSelfFocused
      m.setFocus(m.controlsGroup)
    end if
  end function
end class
