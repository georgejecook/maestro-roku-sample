import "pkg:/source/roku_modules/maestro/view/BaseScreen.brs"
import "pkg:/source/roku_modules/maestro/core/Utils.brs"
import "pkg:/source/roku_modules/maestro/ml/ListMixin.brs"

@node("IOCScreen", "mv_BaseScreen")
class IOCScreen extends mv.BaseScreen

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Views
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private controlsGroup as mc.types.node
  private button1 as mc.types.node
  private button2 as mc.types.node
  private button3 as mc.types.node
  private button4 as mc.types.node
  private button5 as mc.types.node
  private animButton as mc.types.node

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Fields
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  @sync
  @observer("onSpoilersActiveChange")
  @inject("user", "settings.spoilersActive")
  private spoilersActive as boolean

  function new()
    super("IOCScreen")
  end function

  protected override function initialize()
    super.initialize()

    m.createViews()
    m.observeNodeField(m.controlsGroup, "selectedIndex", m.onSelectButton)
  end function

  private function createViews()
    blueButtonStyle = m.styleManager@.getStyle("mv.Button")
    m.setStyleColor(blueButtonStyle, "#0000aa", "#0000ff", "#0000aa", "#000000", "#ffffff", "#0000aa")

    m.controlsGroup = m.createSGNode("mv_ControlsGroup", m.top, "controlsGroup", {
      translation: [200, 200]
      layoutMode: "vert"
      keyDirection: "vert"
      itemSpacings: [10]
    })

    m.button1 = m.createSGNode("mv_Button", m.controlsGroup, "button1", {
      ' text: "simple"
      text: `spoilers: ${m.spoilersActive ? "Active" : "Inactive"}`
      autoSize: true
    })

    m.styleManager@.addStyle("buttons", mc.createPath("blue", blueButtonStyle))

    iconStyle = {
      "blendColor": "#ffffff"
      "size": [48, 48]
      "translation": [5, 0]
      uri: "pkg:/images/small-star-$$RES$$.png"
    }

    m.button2 = m.createSGNode("mv_Button", m.controlsGroup, "button1", {
      text: "left + icon"
      iconStyle: iconStyle
    })

    m.button3 = m.createSGNode("mv_Button", m.controlsGroup, "button3", {
      text: "autosize text right"
      autoSize: true
      horizAlign: "right"
    })
    m.button3.iconStyle = iconStyle

    m.button4 = m.createSGNode("mv_Button", m.controlsGroup, "button4", {
      text: "autosize text that grows left"
      horizAlign: "left"
      autoSize: true
      iconStyle: iconStyle
    })
    m.button5 = m.createSGNode("mv_Button", m.controlsGroup, "button5", {
      text: ""
      size: [50, 50]
      autoSize: true
      horizAlign: "center"
      styleKey: "buttons.blue"
      iconStyle: iconStyle
    })
    m.button5 = m.createSGNode("mv_Button", m.controlsGroup, "button5", {
      text: "autosize really really really really really long text"
      autoSize: true
      horizAlign: "left"
      iconStyle: iconStyle
    })
    m.button5 = m.createSGNode("mv_Button", m.controlsGroup, "button5", {
      text: "short"
      autoSize: true
      size: [50, 50]
      horizAlign: "left"
      iconStyle: iconStyle
    })
    m.controlsGroup@.updateChildren()
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onSpoilersActiveChange(value as string)
    m.button1.text = `spoilers: ${m.spoilersActive ? "Active": "Inactive"}`
  end function

  private function setStyleColor(buttonStyle as mc.types.assocarray, bgn as string, bgf as string, bgs as string, ln as string, lf as string, ls as string)
    mc.setPath(buttonStyle, "normal.backgroundPoster.blendColor", bgn)
    mc.setPath(buttonStyle, "focused.backgroundPoster.blendColor", bgf)
    mc.setPath(buttonStyle, "selected.backgroundPoster.blendColor", bgs)
    mc.setPath(buttonStyle, "normal.label.color", ln)
    mc.setPath(buttonStyle, "focused.label.color", lf)
    mc.setPath(buttonStyle, "selected.label.color", ls)
    return buttonStyle
  end function

  private function onSelectButton(index as integer)
    m.log.info("selected button", index)
    mioc.updateInstance("user", "settings.spoilersActive", not m.spoilersActive)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Presses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onKeyPressUp() as boolean
    m.log.info("UP")
    return false
  end function


  private function onKeyPressLeft() as boolean
    m.log.info("LEFT")
    return false
  end function
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Lifecycle
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onGainedFocus(isSelfFocused as boolean)
    super.onGainedFocus(isSelfFocused)

    if isSelfFocused
      m.setFocus(m.controlsGroup)
    end if
  end function

end class
